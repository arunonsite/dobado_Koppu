{"version":3,"sources":["store/actions/account.actions.ts","common/components/TextInput.tsx","components/Account/Login.tsx","components/LeftMenu/LeftMenu.tsx","components/TopMenu/TopMenuAccount.tsx","components/TopMenu/TopMenu.tsx","common/components/TopCard.tsx","store/actions/users.action.ts","store/actions/root.actions.ts","components/Users/Users.tsx","components/Products/ProductsList.tsx","store/models/product.interface.ts","store/actions/products.action.ts","store/actions/notifications.action.ts","common/components/NumberInput.tsx","common/components/Checkbox.tsx","common/components/Select.tsx","components/Products/ProductsForm.tsx","components/Products/Products.tsx","components/Orders/OrderList.tsx","store/actions/orders.actions.ts","components/Orders/OrderForm.tsx","components/Orders/Orders.tsx","components/Home/Home.tsx","common/components/Notification.tsx","components/Admin/Admin.tsx","common/components/PrivateRoute.tsx","common/components/AccountRoute.tsx","App.tsx","serviceWorker.ts","store/reducers/products.reducer.ts","store/reducers/notification.reducer.ts","store/reducers/users.reducer.ts","store/reducers/order.reducer.ts","store/reducers/account.reducer.ts","store/reducers/root.reducer.ts","store/store.ts","index.tsx"],"names":["LOG_IN","LOG_OUT","TextInput","props","useState","touched","setTouch","error","setError","htmlClass","setHtmlClass","setValue","htmlFor","id","toString","label","value","type","onChange","event","target","validClass","elementValue","required","maxLength","length","field","className","inputClass","placeholder","Login","dispatch","useDispatch","email","password","formState","setFormState","hasFormValueChanged","model","isFormInvalid","onSubmit","e","preventDefault","LeftMenu","leftMenuVisibility","setLeftMenuVisibility","onClick","href","to","TopMenuAccount","useSelector","state","account","isShow","setShow","role","data-toggle","aria-haspopup","aria-expanded","alt","src","aria-labelledby","data-target","TopMenu","page","root","area","subArea","TopCard","class","title","text","icon","ADD_ADMIN","REMOVE_ADMIN","UPDATE_CURRENT_PATH","updateCurrentPath","Users","users","admins","setUserAdmin","user","addAdmin","setUserNotAdmin","admin","userElements","map","key","scope","firstName","lastName","adminElements","ProductList","ProductModificationStatus","products","productElements","product","selectedProduct","onSelect","name","category","amount","price","ADD_PRODUCT","EDIT_PRODUCT","REMOVE_PRODUCT","CHANGE_PRODUCT_AMOUNT","CHANGE_PRODUCT_PENDING_EDIT","CLEAR_PRODUCT_PENDING_EDIT","SET_MODIFICATION_STATE","addProduct","editProduct","changeSelectedProduct","clearSelectedProduct","setModificationState","ADD_NOTIFICATION","REMOVE_NOTIFICATION","addNotification","NumberInput","isNaN","Number","max","min","Checkbox","checked","SelectInput","getOptions","options","option","ProductForm","isCreate","modificationState","Create","description","hasExpiryDate","saveFn","None","saveForm","Select","Products","path","numberItemsCount","totalPrice","reduce","prev","next","totalAmount","popup","setPopup","useEffect","Edit","open","onClose","closeOnDocumentClick","OrderList","orderList","orders","order","ADD_ORDER","OrderForm","initialFormState","resetForm","alert","Orders","totalSales","Home","totalProductAmount","totalOrderAmount","Notifications","closeNotification","removeNotification","notificationList","notifications","notification","date","toLocaleTimeString","navigator","language","hour","minute","data-dismiss","aria-label","aria-hidden","Admin","Notification","PrivateRoute","children","rest","render","AccountRoute","pathname","App","Boolean","window","location","hostname","match","initialState","productsReducer","action","maxId","Math","apply","o","foundIndex","findIndex","pr","filter","Date","notificationReducer","Infinity","newItem","userReducer","x","orderReducer","accountReducer","rootReducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","subscribe","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"wWAAaA,EAAiB,SACjBC,EAAkB,UC+ChBC,MA7Cf,SAAmBC,GAAqC,IAAD,EACvBC,oBAAS,GADc,mBAC5CC,EAD4C,KACnCC,EADmC,OAEzBF,mBAAS,IAFgB,mBAE5CG,EAF4C,KAErCC,EAFqC,OAGjBJ,mBAAS,IAHQ,mBAG5CK,EAH4C,KAGjCC,EAHiC,OAI9BN,mBAAS,IAArBO,EAJ0C,oBA0BnD,OACI,6BACI,2BAAOC,QAAST,EAAMU,GAAGC,YAAaX,EAAMY,OAC5C,2BACIC,MAAOb,EAAMa,MACbC,KAAMd,EAAMc,KACZC,SAzBZ,SAAwBC,GAA6C,IAAD,EACxB,CAAC,GAAI,GAAIA,EAAMC,OAAOJ,OAAzDT,EAD2D,KACpDc,EADoD,KACxCC,EADwC,QAGxCA,GAAgBnB,EAAMoB,SAC1C,CAAC,wBAAyB,cAAgB,CAAC,GAAI,YAJa,mBAMhE,GAHChB,EAH+D,KAGxDc,EAHwD,MAM3Dd,EAAO,CAAC,IAAD,EACeJ,EAAMqB,WAAaF,GAAgBA,EAAaG,OAAUtB,EAAMqB,UACvF,CAAC,8BAAD,OAA+BrB,EAAMqB,UAArC,eAA6D,cAAgB,CAAC,GAAI,YAF1E,mBACPjB,EADO,KACAc,EADA,KAKZlB,EAAMe,SAAS,CAAEF,MAAOM,EAAcf,MAAOA,EAAOF,QAASA,EAASqB,MAAOvB,EAAMuB,QAEnFpB,GAAS,GACTE,EAASD,GACTG,EAAaW,GACbV,EAASW,IAUDK,UAAS,uBAAkBxB,EAAMyB,WAAxB,YAAsCnB,GAC/CI,GAAE,aAAQV,EAAMY,OAChBc,YAAa1B,EAAM0B,cACtBtB,EACG,yBAAKoB,UAAU,oBACVpB,GACI,O,8NCpCzB,IAyFeuB,EAzFS,WACtB,IAAMC,EAA0BC,cADJ,EAGM5B,mBAAS,CACzC6B,MAAO,CAAE1B,MAAO,GAAIS,MAAO,IAC3BkB,SAAU,CAAE3B,MAAO,GAAIS,MAAO,MALJ,mBAGrBmB,EAHqB,KAGVC,EAHU,KAQ5B,SAASC,EAAoBC,GAC3BF,E,yVAAa,CAAD,GAAMD,EAAN,eAAkBG,EAAMZ,MAAQ,CAAEnB,MAAO+B,EAAM/B,MAAOS,MAAOsB,EAAMtB,UASjF,SAASuB,IACP,OAAQJ,EAAUF,MAAM1B,OAAS4B,EAAUD,SAAS3B,QAC9C4B,EAAUF,MAAMjB,QAAUmB,EAAUD,SAASlB,MAQrD,OAEE,yBAAKW,UAAU,aACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,yCACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,8CACf,yBAAKA,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,yBAAd,aAEF,0BAAMA,UAAU,OAAOa,SA9BzC,SAAgBC,GFfX,IAAeR,EEgBlBQ,EAAEC,iBACCH,KACHR,GFlBkBE,EEkBHE,EAAUF,MAAMjB,MFjBxB,CAAEC,KAAMjB,EAAQiC,MAAOA,OE6CZ,yBAAKN,UAAU,cAEb,kBAAC,EAAD,CAAWd,GAAG,cACZa,MAAM,QACNV,MAAOmB,EAAUF,MAAMjB,MACvBE,SAAUmB,EACVd,UAAU,EACVC,UAAW,IACXT,MAAM,QACNc,YAAY,WAEhB,yBAAKF,UAAU,cACb,kBAAC,EAAD,CAAWd,GAAG,iBACZa,MAAM,WACNV,MAAOmB,EAAUD,SAASlB,MAC1BE,SAAUmB,EACVd,UAAU,EACVC,UAAW,IACXP,KAAK,WACLF,MAAM,WACNc,YAAY,cAEhB,yBAAKF,UAAU,cACb,yBAAKA,UAAU,wCACb,2BAAOV,KAAK,WAAWU,UAAU,uBAAuBd,GAAG,gBAC3D,2BAAOc,UAAU,uBACff,QAAQ,eADV,iBAIJ,4BACEe,UAAS,6CAjDNY,IACN,WAAa,IAiDVtB,KAAK,UAFP,mBCIP0B,EA/EY,WAAO,IAAD,EAEqBvC,oBAAS,GAF9B,mBAExBwC,EAFwB,KAEJC,EAFI,KAY7B,OACI,kBAAC,WAAD,KACI,yBAAKlB,UAAU,eACX,4BAAQA,UAAU,gCAAgCmB,QAAS,WAVnED,GAAuBD,KAWX,uBAAGjB,UAAU,kBAIrB,wBAAIA,UAAS,8EAXTiB,EAAsB,GAAK,aAY3B/B,GAAG,gBAEH,uBAAGc,UAAU,iEAAiEoB,KAAK,cAC/E,yBAAKpB,UAAU,6CACX,uBAAGA,UAAU,iBAEjB,yBAAKA,UAAU,2BAAf,SAA+C,wCAGnD,wBAAIA,UAAU,yBAEd,wBAAIA,UAAU,mBAEV,kBAAC,IAAD,CAAMA,UAAU,WAAWqB,GAAG,QAC1B,uBAAGrB,UAAU,gCACb,6CAIR,wBAAIA,UAAU,oBACd,yBAAKA,UAAU,mBAAf,aAIA,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWqB,GAAE,aACzB,uBAAGrB,UAAU,2BACb,4CAIR,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWqB,GAAE,WACzB,uBAAGrB,UAAU,6BACb,0CAIR,wBAAIA,UAAU,oBAEd,yBAAKA,UAAU,mBAAf,SAKA,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWqB,GAAE,UACzB,uBAAGrB,UAAU,sBACb,yCAIR,wBAAIA,UAAU,yCCjCfsB,MAtCf,WACE,IAAMlB,EAA0BC,cAC1BC,EAAgBiB,aAAY,SAACC,GAAD,OAAuBA,EAAMC,QAAQnB,SAFlC,EAGX7B,oBAAS,GAHE,mBAG9BiD,EAH8B,KAGtBC,EAHsB,KAKrC,OAEE,wBAAI3B,UAAU,8BACZ,uBAAGA,UAAU,2BACXmB,QAAS,WACPQ,GAASD,IAEXN,KAAK,KACLlC,GAAG,eACH0C,KAAK,SACLC,cAAY,WACZC,gBAAc,OACdC,gBAAc,SACd,0BAAM/B,UAAU,uCAAuCM,GACvD,yBAAKN,UAAU,6BAA6BgC,IAAI,GAC9CC,IAAI,mDAGR,yBAAKjC,UAAS,qEAAiE0B,EAAU,OAAS,IAChGQ,kBAAgB,gBAChB,uBAAGlC,UAAU,gBACbmB,QAAS,kBAAMf,EJvBZ,CAAEd,KAAMhB,KIwBX8C,KAAK,KACLS,cAAY,QACZM,cAAY,gBACV,uBAAGnC,UAAU,uDALf,aCNOoC,G,MAlBW,WACxB,IAAMC,EAA2Bd,aAAY,SAACC,GAAD,OAAuBA,EAAMc,KAAKD,QAE/E,OACE,yBAAKrC,UAAU,kFACb,wBAAIA,UAAU,8BACZ,wBAAIA,UAAU,mBAAkB,uBAAGoB,KAAK,MAAMiB,EAAOA,EAAKE,KAAO,OACjE,wBAAIvC,UAAU,mBAAkB,uBAAGoB,KAAK,MAAMiB,EAAOA,EAAKG,QAAU,QAGtE,wBAAIxC,UAAU,sBACZ,yBAAKA,UAAU,qCACf,kBAAC,EAAD,UCMOyC,MArBf,SAAiBjE,GACb,OACI,yBAAKwB,UAAU,0BACX,yBAAKA,UAAS,2BAAsBxB,EAAMkE,MAA5B,wBACV,yBAAK1C,UAAU,aACX,yBAAKA,UAAU,qCACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,2DAA2DxB,EAAMmE,OAChF,yBAAK3C,UAAU,0CAA0CxB,EAAMoE,OAEnE,yBAAK5C,UAAU,YACX,uBAAGA,UAAS,iBAAYxB,EAAMqE,KAAlB,gCCZ3BC,EAAoB,YACpBC,EAAuB,eCH7B,IAAMC,EAA8B,sBAEpC,SAASC,EAAkBV,EAAcC,GAC5C,MAAO,CAAElD,KAAM0D,EAAqBT,KAAMA,EAAMC,QAASA,GCK7D,IAiHeU,EAjHS,WAEtB,IAAM9C,EAA0BC,cAChCD,EAAS6C,EAAkB,OAAQ,SAEnC,IAAME,EAAiB5B,aAAY,SAACC,GAAD,OAAuBA,EAAM2B,MAAMA,SAChEC,EAAkB7B,aAAY,SAACC,GAAD,OAAuBA,EAAM2B,MAAMC,UAEvE,SAASC,EAAaC,GACpBlD,EFZG,SAAkBkD,GACrB,MAAO,CAAEhE,KAAMwD,EAAWQ,KAAMA,GEWvBC,CAASD,IAGpB,SAASE,EAAgBC,GACvBrD,EFXO,CAAEd,KAAMyD,EAAcO,KEWRG,IAGvB,IAAMC,EAA8BP,EAAMQ,KAAI,SAAAL,GAC5C,OACE,wBAAItD,UAAS,YACX4D,IAAG,eAAUN,EAAKpE,KAClB,wBAAI2E,MAAM,OAAOP,EAAKpE,IACtB,4BAAKoE,EAAKQ,WACV,4BAAKR,EAAKS,UACV,4BAAKT,EAAKhD,OACV,4BAAI,4BAAQN,UAAU,kBAAkBmB,QAAS,kBAAMkC,EAAaC,KAAhE,aAAJ,SAIAU,EAA+BZ,EAAOO,KAAI,SAAAF,GAC9C,OACE,wBAAIzD,UAAS,YACX4D,IAAG,eAAUH,EAAMvE,KACnB,wBAAI2E,MAAM,OAAOJ,EAAMvE,IACvB,4BAAKuE,EAAMK,WACX,4BAAKL,EAAMM,UACX,4BAAKN,EAAMnD,OACX,4BAAI,4BAAQN,UAAU,iBAAiBmB,QAAS,kBAAMqC,EAAgBC,KAAlE,gBAAJ,SAIN,OACE,kBAAC,WAAD,KACE,wBAAIzD,UAAU,yBAAd,SACA,uBAAGA,UAAU,QAAb,cAEA,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAS2C,MAAM,SAASC,KAAMQ,EAAOtD,OAAOX,WAAY0D,KAAK,WAAWH,MAAM,YAC9E,kBAAC,EAAD,CAASC,MAAM,OAAOC,KAAMO,EAAMrD,OAAOX,WAAY0D,KAAK,OAAOH,MAAM,YAGzE,yBAAK1C,UAAU,OACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,mCAAd,cACA,yBAAKA,UAAU,oBAGjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,4BACb,2BAAOA,UAAU,SACf,2BAAOA,UAAU,eACf,4BACE,wBAAI6D,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,WAGJ,+BACGG,SASf,yBAAKhE,UAAU,OACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,mCAAd,aACA,yBAAKA,UAAU,oBAGjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,4BACb,2BAAOA,UAAU,SACf,2BAAOA,UAAU,eACf,4BACE,wBAAI6D,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,WAGJ,+BACGH,WC3DNO,ICxCHC,EDwCGD,EAxCf,SAAqBzF,GACnB,IAAM2F,EAA0B5C,aAAY,SAACC,GAAD,OAAuBA,EAAM2C,YAEnEC,EAA0CD,EAASA,SAASR,KAAI,SAAAU,GACpE,OAAKA,EACG,wBAAIrE,UAAS,oBAAgBmE,EAASG,iBAAmBH,EAASG,gBAAgBpF,KAAOmF,EAAQnF,GAAM,WAAa,IAC1HiC,QAAS,WACJ3C,EAAM+F,UAAU/F,EAAM+F,SAASF,IAEpCT,IAAG,kBAAaS,EAAQnF,KACxB,wBAAI2E,MAAM,OAAOQ,EAAQnF,IACzB,4BAAKmF,EAAQG,MACb,4BAAKH,EAAQI,UACb,4BAAKJ,EAAQK,QACb,4BAAKL,EAAQM,QAVQ,QAezB,OACE,yBAAK3E,UAAU,4BACb,2BAAOA,UAAU,SACf,2BAAOA,UAAU,eACf,4BACE,wBAAI6D,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,YACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,WAGJ,+BACGO,O,SChCCF,O,eAAAA,I,mBAAAA,I,gBAAAA,M,KCTL,IAAMU,EAAsB,cACtBC,EAAuB,eACvBC,EAAyB,iBACzBC,EAAgC,wBAChCC,EAAsC,8BACtCC,EAAqC,6BACrCC,EAAiC,yBAEvC,SAASC,EAAWd,GACvB,MAAO,CAAE/E,KAAMsF,EAAaP,QAASA,GAGlC,SAASe,EAAYf,GACxB,MAAO,CAAE/E,KAAMuF,EAAcR,QAASA,GAWnC,SAASgB,EAAsBhB,GAClC,MAAO,CAAE/E,KAAM0F,EAA6BX,QAASA,GAGlD,SAASiB,IACZ,MAAO,CAAEhG,KAAM2F,GAGZ,SAASM,EAAqBlG,GACjC,MAAO,CAAEC,KAAM4F,EAAwB7F,MAAOA,GClC3C,IAAMmG,EAA2B,mBAC3BC,EAA8B,sBAEpC,SAASC,EAAgB/C,EAAeC,GAC3C,MAAO,CAAEtD,KAAMkG,EAAkB5C,KAAMA,EAAMD,MAAOA,GC8CzCgD,MA/Cf,SAAqBnH,GAAuC,IAAD,EAC3BC,oBAAS,GADkB,mBAChDC,EADgD,KACvCC,EADuC,OAE7BF,mBAAS,IAFoB,mBAEhDG,EAFgD,KAEzCC,EAFyC,OAGrBJ,mBAAS,IAHY,mBAGhDK,EAHgD,KAGrCC,EAHqC,OAIlCN,mBAAS,GAArBO,EAJ8C,oBA6BvD,OACI,6BACI,2BAAOC,QAAST,EAAMU,GAAGC,YAAaX,EAAMY,OAC5C,2BACIC,MAAOb,EAAMa,MACbC,KAAK,SACLC,SA5BZ,SAAwBC,GACpB,IAAIG,EAAwBiG,MAAMC,OAAOrG,EAAMC,OAAOJ,QAAW,EAAIwG,OAAOrG,EAAMC,OAAOJ,OACpFT,EAAsB,GAAfc,EAAmB,GAE/B,IAAKd,EAAO,CAAC,IAAD,EAC6B,MAAbJ,EAAMsH,KAAgBnG,EAAgBnB,EAAMsH,IACpE,CAAC,8BAAD,OAA+BtH,EAAMsH,IAArC,KAA6C,cAAgB,CAAC,GAAI,YAF1D,mBACPlH,EADO,KACAc,EADA,KAKZ,IAAKd,EAAO,CAAC,IAAD,EAC6B,MAAbJ,EAAMuH,KAAgBpG,EAAgBnB,EAAMuH,IACpE,CAAC,6BAAD,OAA8BvH,EAAMuH,IAApC,KAA4C,cAAgB,CAAC,GAAI,YAFzD,mBACPnH,EADO,KACAc,EADA,KAKZlB,EAAMe,SAAS,CAAEF,MAAOM,EAAcf,MAAOA,EAAOF,QAASA,EAASqB,MAAOvB,EAAMuB,QAEnFpB,GAAS,GACTE,EAASD,GACTG,EAAaW,GACbV,EAASW,IAUDK,UAAS,uBAAkBxB,EAAMyB,WAAxB,YAAsCnB,GAC/CI,GAAE,aAAQV,EAAMY,SACnBR,EACG,yBAAKoB,UAAU,oBACVpB,GACI,OCEVoH,MA3Cf,SAAkBxH,GAAoC,IAAD,EACrBC,oBAAS,GADY,mBAC1CC,EAD0C,KACjCC,EADiC,OAEvBF,mBAAS,IAFc,mBAE1CG,EAF0C,KAEnCC,EAFmC,OAGfJ,mBAAS,IAHM,mBAG1CK,EAH0C,KAG/BC,EAH+B,OAI5BN,oBAAS,GAArBO,EAJwC,oBAsBjD,OACI,yBAAKgB,UAAU,cACX,2BACIA,UAAS,2BAAsBxB,EAAMyB,WAAazB,EAAMyB,WAAa,GAA5D,YAAkEnB,GAC3EQ,KAAK,WACLJ,GAAE,aAAQV,EAAMY,OAChB6G,QAASzH,EAAMa,MACfE,SAtBZ,SAAwBC,GAA6C,IAC5DZ,EAAOc,EADoD,EACxB,CAAC,GAAI,GAAIF,EAAMC,OAAOwG,SAAtCtG,EADwC,QAGxCA,GAAgBnB,EAAMoB,SAC1C,CAAC,0BAA2B,cAAgB,CAAC,GAAI,YAJW,mBAG/DhB,EAH+D,KAGxDc,EAHwD,KAOhElB,EAAMe,SAAS,CAAEF,MAAOM,EAAcf,MAAOA,EAAOF,QAASA,EAASqB,MAAOvB,EAAMuB,QAEnFpB,GAAS,GACTE,EAASD,GACTG,EAAaW,GACbV,EAASW,MAWL,2BAAOK,UAAU,mBAAmBf,QAAST,EAAMU,GAAGC,YACjDX,EAAMY,OAGVR,EACG,yBAAKoB,UAAU,oBACVpB,GACI,OCYVsH,MAjDf,SAAqB1H,GAAkC,IAAD,EACtBC,oBAAS,GADa,mBAC3CC,EAD2C,KAClCC,EADkC,OAExBF,mBAAS,IAFe,mBAE3CG,EAF2C,KAEpCC,EAFoC,OAGhBJ,mBAAS,IAHO,mBAG3CK,EAH2C,KAGhCC,EAHgC,OAIxBN,mBAASD,EAAMa,OAJS,mBAI3CA,EAJ2C,KAIpCL,EAJoC,KAsB5CmH,EAAqC3H,EAAM4H,QAAQzC,KAAI,SAAA0C,GACzD,OACI,4BAAQzC,IAAKyC,EAAQhH,MAAK,UAAKgH,IAAWA,MAIlD,OACI,kBAAC,WAAD,KACI,2BAAOpH,QAAO,UAAKT,EAAMU,KAAOV,EAAMY,OACtC,4BACIC,MAAOA,EACPH,GAAE,UAAKV,EAAMU,IACbc,UAAS,uBAAkBxB,EAAMyB,WAAazB,EAAMyB,WAAa,GAAxD,YAA8DnB,GACvES,SA5BZ,SAAwBC,GAA8C,IAC7DZ,EAAOc,EADqD,EACzB,CAAC,GAAI,GAAIF,EAAMC,OAAOJ,OAAtCM,EADyC,QAGzCA,GAAgBnB,EAAMoB,SAC1C,CAAC,2BAA4B,cAAgB,CAAC,GAAI,YAJW,mBAGhEhB,EAHgE,KAGzDc,EAHyD,KAOjElB,EAAMe,SAAS,CAAEF,MAAOM,EAAcf,MAAOA,EAAOF,QAASA,EAASqB,MAAOvB,EAAMuB,QAEnFpB,GAAS,GACTE,EAASD,GACTG,EAAaW,GACbV,EAASW,KAiBD,4BAAQN,MAAM,IAAd,aACC8G,GAGJvH,EACG,yBAAKoB,UAAU,oBACVpB,GACI,O,yjBClCzB,IAmJe0H,EAnJe,WAC5B,IAAMlG,EAA0BC,cAC1B8D,EAAiC5C,aAAY,SAACC,GAAD,OAAuBA,EAAM2C,YAC5EE,EAA2BF,EAASG,gBAClCiC,EAAqBpC,EAASqC,oBAAsBtC,EAA0BuC,OAE/EpC,IAAWkC,IACdlC,EAAU,CAAEnF,GAAI,EAAGsF,KAAM,GAAIkC,YAAa,GAAIhC,OAAQ,EAAGC,MAAO,EAAGgC,eAAe,EAAOlC,SAAU,KAPnE,MAUAhG,mBAAS,CACzC+F,KAAM,CAAE5F,MAAO,GAAIS,MAAOgF,EAAQG,MAClCkC,YAAa,CAAE9H,MAAO,GAAIS,MAAOgF,EAAQqC,aACzChC,OAAQ,CAAE9F,MAAO,GAAIS,MAAOgF,EAAQK,QACpCC,MAAO,CAAE/F,MAAO,GAAIS,MAAOgF,EAAQM,OACnCgC,cAAe,CAAE/H,MAAO,GAAIS,MAAOgF,EAAQsC,eAC3ClC,SAAU,CAAE7F,MAAO,GAAIS,MAAOgF,EAAQI,YAhBN,mBAU3BjE,EAV2B,KAUhBC,EAVgB,KAmBlC,SAASC,EAAoBC,GAC3BF,EAAa,KAAKD,EAAN,eAAkBG,EAAMZ,MAAQ,CAAEnB,MAAO+B,EAAM/B,MAAOS,MAAOsB,EAAMtB,UAwCjF,SAASuB,IACP,OAAQJ,EAAUkE,OAAO9F,OAAS4B,EAAUkG,YAAY9H,OACnD4B,EAAUgE,KAAK5F,OAAS4B,EAAUmE,MAAM/F,OAAS4B,EAAUmG,cAAc/H,OACzE4B,EAAUiE,SAAS7F,QAAU4B,EAAUgE,KAAKnF,QAAUmB,EAAUiE,SAASpF,MAGhF,OACE,kBAAC,WAAD,KACE,yBAAKW,UAAU,qBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,mCAAd,WAA0DuG,EAAW,SAAW,SAElF,yBAAKvG,UAAU,aACb,0BAAMa,SAnDhB,SAAkBC,GAChBA,EAAEC,iBACEH,KAQN,SAAkBJ,EAA8BoG,GAC1CvC,IACFjE,EAASwG,EAAO,KACXvC,EADU,CAEbG,KAAMhE,EAAUgE,KAAKnF,MACrBqH,YAAalG,EAAUkG,YAAYrH,MACnCsF,MAAOnE,EAAUmE,MAAMtF,MACvBqF,OAAQlE,EAAUkE,OAAOrF,MACzBsH,cAAenG,EAAUmG,cAActH,MACvCoF,SAAUjE,EAAUiE,SAASpF,UAG/Be,EAASsF,EAAgB,iBAAD,kBAA8BlF,EAAUgE,KAAKnF,MAA7C,oBACxBe,EAASkF,KACTlF,EAASmF,EAAqBrB,EAA0B2C,QAjB1DC,CAAStG,EADmB+F,EAAYpB,EAAaC,KA8C3C,yBAAKpF,UAAU,YACb,yBAAKA,UAAU,uBACb,kBAAC,EAAD,CAAWd,GAAG,cACZG,MAAOmB,EAAUgE,KAAKnF,MACtBU,MAAM,OACNR,SAAUmB,EACVd,UAAU,EACVC,UAAW,GACXT,MAAM,OACNc,YAAY,UAEhB,yBAAKF,UAAU,uBACb,kBAAC+G,EAAD,CACE7H,GAAG,iBACHa,MAAM,WACNX,MAAM,WACNgH,QAAS,CAAC,QAAS,QAAS,WAC5BxG,UAAU,EACVL,SAAUmB,EACVrB,MAAOmB,EAAUiE,SAASpF,UAIhC,yBAAKW,UAAU,cACb,kBAAC,EAAD,CAAWd,GAAG,oBACda,MAAQ,cACNV,MAAOmB,EAAUkG,YAAYrH,MAC7BE,SAAUmB,EACVd,UAAU,EACVC,UAAW,IACXT,MAAM,cACNc,YAAY,iBAEhB,yBAAKF,UAAU,YACb,yBAAKA,UAAU,uBACb,kBAAC,EAAD,CAAad,GAAG,eACdG,MAAOmB,EAAUkE,OAAOrF,MACxBU,MAAM,SACNR,SAAUmB,EACVoF,IAAK,IACLC,IAAK,EACL3G,MAAM,YAEV,yBAAKY,UAAU,uBACb,kBAAC,EAAD,CAAad,GAAG,cACdG,MAAOmB,EAAUmE,MAAMtF,MACvBU,MAAM,QACNR,SAAUmB,EACVoF,IAAK,IACLC,IAAK,EACL3G,MAAM,YAGZ,yBAAKY,UAAU,cACb,kBAAC,EAAD,CACEd,GAAG,kBACHa,MAAM,gBACNV,MAAOmB,EAAUmG,cAActH,MAC/BD,MAAM,kBACNG,SAAUmB,KAGd,4BAAQV,UAAU,iBAAiBmB,QAAS,WArFtDf,EAASmF,EAAqBrB,EAA0B2C,SAqF9C,UACA,4BAAQvH,KAAK,SAASU,UAAS,sCAlFlBY,IACN,WAAa,KAiFpB,c,gBCvCCoG,EAjGY,WACzB,IAAM5G,EAA0BC,cAC1B8D,EAA0B5C,aAAY,SAACC,GAAD,OAAuBA,EAAM2C,YACnE8C,EAA2B1F,aAAY,SAACC,GAAD,OAAuBA,EAAMc,KAAKD,QACzE6E,EAA2B/C,EAASA,SAASrE,OAC7CqH,EAAqBhD,EAASA,SAASiD,QAAO,SAACC,EAAMC,GAAP,OAAgBD,GAASC,EAAK3C,MAAQ2C,EAAK5C,QAAW,KAAI,GACxG6C,EAAsBpD,EAASA,SAASiD,QAAO,SAACC,EAAMC,GAAP,OAAgBD,GAAQC,EAAK5C,QAAU,KAAI,GANjE,EAOLjG,oBAAS,GAPJ,mBAOxB+I,EAPwB,KAOjBC,EAPiB,KAyB/B,OAhBAC,qBAAU,WACRtH,EAASkF,KACTlF,EAAS6C,EAAkB,WAAY,WACtC,CAACgE,EAAK1E,KAAMnC,IAcb,kBAAC,WAAD,KACE,wBAAIJ,UAAU,yBAAd,YACA,uBAAGA,UAAU,QAAb,iBACA,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAS2C,MAAM,gBAAgBC,KAAI,UAAKsE,GAAoBrE,KAAK,MAAMH,MAAM,YAC7E,kBAAC,EAAD,CAASC,MAAM,iBAAiBC,KAAI,UAAK2E,GAAe1E,KAAK,YAAYH,MAAM,WAC/E,kBAAC,EAAD,CAASC,MAAM,gBAAgBC,KAAI,WAAMuE,GAActE,KAAK,cAAcH,MAAM,aAGlF,yBAAK1C,UAAU,OACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,mCAAd,gBACA,yBAAKA,UAAU,kBACb,4BAAQA,UAAU,4BAA4BmB,QAAS,kBACrDf,EAASmF,EAAqBrB,EAA0BuC,WACxD,uBAAGzG,UAAU,oBAEf,4BAAQA,UAAU,2BAA2BmB,QAAS,kBACpDf,EAASmF,EAAqBrB,EAA0ByD,SACxD,uBAAG3H,UAAU,mBAEf,4BAAQA,UAAU,0BAA0BmB,QAAS,WA7B9DgD,EAASG,iBACVmD,GAAS,KA6BG,uBAAGzH,UAAU,uBAInB,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACEuE,SA1Cd,SAAyBF,GACvBjE,EAASiF,EAAsBhB,IAC/BjE,EAASmF,EAAqBrB,EAA0B2C,aA6CjD1C,EAASqC,oBAAsBtC,EAA0BuC,QACtDtC,EAASqC,oBAAsBtC,EAA0ByD,MAAQxD,EAASG,gBAC9E,kBAAC,EAAD,MAAkB,MAItB,kBAAC,IAAD,CACEtE,UAAU,cACV4H,KAAMJ,EACNK,QAAS,kBAAMJ,GAAS,IACxBK,sBAAoB,GAEpB,yBAAK9H,UAAU,eACb,yBAAKA,UAAU,eAAf,iBAGA,yBAAKA,UAAU,iBACb,4BAAQV,KAAK,SACXU,UAAU,iBACVmB,QAAS,WN7EhB,IAAuBjC,EM8ETiF,EAASG,kBAGdlE,EAASsF,EAAgB,kBAAD,kBAA+BvB,EAASG,gBAAgBE,KAAxD,kBACxBpE,GNlFclB,EMkFSiF,EAASG,gBAAgBpF,GNjFrD,CAAEI,KAAMwF,EAAgB5F,GAAIA,KMkFvBkB,EAASkF,KACTmC,GAAS,MATb,eCpDGM,EAnCa,WACxB,IAEMC,EAFmBzG,aAAY,SAACC,GAAD,OAAuBA,EAAMyG,OAAOA,UAEjCtE,KAAI,SAAAuE,GACxC,OACI,wBAAIlI,UAAS,YACT4D,IAAG,gBAAWsE,EAAMhJ,KACpB,wBAAI2E,MAAM,OAAOqE,EAAMhJ,IACvB,4BAAKgJ,EAAM1D,MACX,4BAAK0D,EAAM7D,QAAQG,MACnB,4BAAK0D,EAAMxD,QACX,4BAAKwD,EAAMf,gBAIvB,OACI,yBAAKnH,UAAU,4BACX,2BAAOA,UAAU,SACb,2BAAOA,UAAU,eACb,4BACI,wBAAI6D,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,iBAGR,+BACKmE,MC/BRG,EAAoB,Y,0jBCSjC,IA6HeC,GA7Ha,WACxB,IAAMhI,EAA0BC,cAC1BiE,EAAmC/C,aAAY,SAACC,GAAD,OAAuBA,EAAM2C,SAASG,mBACrF+D,EAAoC,CACtC7D,KAAM,CAAE5F,MAAO,GAAIS,MAAO,IAC1BgF,QAAS,CAAEzF,MAAO,GAAIS,MAAO,MAC7BqF,OAAQ,CAAE9F,MAAO,GAAIS,MAAO,GAC5B8H,WAAY,CAAEvI,MAAO,GAAIS,MAAO,IAPN,EAUIZ,mBAAS4J,GAVb,mBAUvB7H,EAVuB,KAUZC,EAVY,KA0B9B,SAASC,EAAoBC,GACzBF,EAAa,MAAKD,EAAN,eAAkBG,EAAMZ,MAAQ,CAAEnB,MAAO+B,EAAM/B,MAAOS,MAAOsB,EAAMtB,UAGnF,SAASiJ,IACL7H,EAAa4H,GAmCjB,SAASzH,IACL,OAAQJ,EAAUkE,OAAO9F,OAAS4B,EAAU2G,WAAWvI,OAChD4B,EAAUgE,KAAK5F,OAAS4B,EAAU6D,QAAQzF,QAAU4B,EAAUgE,KAAKnF,QAClEiF,EAQZ,OACI,kBAAC,WAAD,KACI,yBAAKtE,UAAU,oBACX,yBAAKA,UAAU,oBACX,wBAAIA,UAAU,mCAAd,iBAEJ,yBAAKA,UAAU,aACX,0BAAMa,SAlDtB,SAAmBC,GACfA,EAAEC,iBACEH,KAOR,SAAkBJ,GACd,GAAI8D,EAAiB,CACjB,GAAIA,EAAgBI,OAASlE,EAAUkE,OAAOrF,MAE1C,YADAkJ,MAAM,oCAIV/H,EAAU6D,QAAQhF,MAAQiF,EAC1BlE,GD1Da8H,EC0DK,CACdhJ,GAAI,EACJsF,KAAMhE,EAAUgE,KAAKnF,MACrBqF,OAAQlE,EAAUkE,OAAOrF,MACzB8H,WAAY3G,EAAU2G,WAAW9H,MACjCgF,QAAS7D,EAAU6D,QAAQhF,OD9DhC,CAAEC,KAAM6I,EAAWD,MAAOA,KCiEzB9H,EAASsF,EAAgB,cAAD,gBAAyBlF,EAAUgE,KAAKnF,MAAxC,mBACxBe,EAASkF,KACTlF,GTnDwBlB,ESmDKoF,EAAgBpF,GTnDTwF,ESmDalE,EAAUkE,OAAOrF,MTlDnE,CAAEC,KAAMyF,EAAuB7F,GAAIA,EAAIwF,OAAQA,KSmD9C4D,ITpDL,IAA6BpJ,EAAYwF,EQjBzC,IAAkBwD,EC+CjBpB,CAAStG,KA6CO,yBAAKR,UAAU,YACX,yBAAKA,UAAU,wBACX,kBAAC,EAAD,CAAWd,GAAG,aACVG,MAAOmB,EAAUgE,KAAKnF,MACtBU,MAAM,OACNR,SAAUmB,EACVd,UAAU,EACVC,UAAW,GACXT,MAAM,OACNc,YAAY,UAEpB,yBAAKF,UAAU,uBACX,kBAAC,EAAD,CAAad,GAAG,eACZG,MAAOmB,EAAUkE,OAAOrF,MACxBU,MAAM,SACNR,SAxFhC,SAA0BoB,GACtB,IAAIwG,EAAqB3G,EAAU2G,WAAW9H,MAC1CiF,IACA6C,EAAa7C,EAAgBK,MAAShE,EAAMtB,OAGhDoB,EAAa,MACND,EADK,CAERkE,OAAQ,CAAE9F,MAAO+B,EAAM/B,MAAOS,MAAOsB,EAAMtB,OAC3C8H,WAAY,CAAEvI,MAAO+B,EAAM/B,MAAOS,MAAO8H,OAgFjBrB,IAAK,IACLC,IAAK,EACL3G,MAAM,YAGd,yBAAKY,UAAU,uBACX,kBAAC,EAAD,CAAad,GAAG,mBACZG,MAAOmB,EAAU2G,WAAW9H,MAC5BU,MAAM,aACNR,SAAUmB,EACVoF,IAAK,IACLC,IAAK,EACL3G,MAAM,YAGlB,4BAAQY,UAAU,iBAAiBmB,QAAS,kBAAMmH,MAAlD,SACA,4BAAQhJ,KAAK,SAASU,UAAS,sCA5CvBY,IACP,WAAa,KA2Cd,eC5DT4H,GAxDU,WACrB,IAAMpI,EAA0BC,cAC1B4H,EAAmB1G,aAAY,SAACC,GAAD,OAAuBA,EAAMyG,OAAOA,UACnEQ,EAAqBR,EAAOb,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKH,aAAY,GAC3EI,EAAsBU,EAAOb,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAK5C,SAAQ,GAQ9E,OAPAtE,EAAS6C,EAAkB,SAAU,SACrC7C,EAASkF,KAOL,kBAAC,WAAD,KACI,wBAAItF,UAAU,yBAAd,SACA,uBAAGA,UAAU,QAAb,eAEA,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAS2C,MAAM,cAAcC,KAAM6F,EAAWtJ,WAAY0D,KAAK,SAASH,MAAM,YAC9E,kBAAC,EAAD,CAASC,MAAM,eAAeC,KAAM2E,EAAYpI,WAAY0D,KAAK,aAAaH,MAAM,YAGxF,yBAAK1C,UAAU,OACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,oBACX,wBAAIA,UAAU,mCAAd,cACA,yBAAKA,UAAU,oBAGnB,yBAAKA,UAAU,aACX,kBAAC,EAAD,UAMhB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,kBAAC,GAAD,OAEJ,yBAAKA,UAAU,YACX,yBAAKA,UAAU,qCACX,yBAAKA,UAAU,oBACX,wBAAIA,UAAU,mCAAd,iBAEJ,kBAAC,EAAD,CACIuE,SAvCxB,SAAuBF,GACnBjE,EAASiF,EAAsBhB,YCgDxBqE,GA5DQ,WACrB,IAAMvE,EAA0B5C,aAAY,SAACC,GAAD,OAAuBA,EAAM2C,YACnE+C,EAA2B/C,EAASA,SAASrE,OAC7CqH,EAAqBhD,EAASA,SAASiD,QAAO,SAACC,EAAMC,GAAP,OAAgBD,GAASC,EAAK3C,MAAQ2C,EAAK5C,QAAW,KAAI,GACxGiE,EAA6BxE,EAASA,SAASiD,QAAO,SAACC,EAAMC,GAAP,OAAgBD,GAAQC,EAAK5C,QAAU,KAAI,GAEjGuD,EAAmB1G,aAAY,SAACC,GAAD,OAAuBA,EAAMyG,OAAOA,UACnEQ,EAAqBR,EAAOb,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKH,aAAY,GAC3EyB,EAA2BX,EAAOb,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAK5C,SAAQ,GAKnF,OAHgCrE,aAChCD,CAAS6C,EAAkB,OAAQ,KAGjC,kBAAC,WAAD,KACE,wBAAIjD,UAAU,yBAAd,aACA,uBAAGA,UAAU,QAAb,gDAEA,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAS2C,MAAM,gBAAgBC,KAAI,UAAKsE,GAAoBrE,KAAK,MAAMH,MAAM,YAC7E,kBAAC,EAAD,CAASC,MAAM,iBAAiBC,KAAI,UAAK+F,GAAsB9F,KAAK,YAAYH,MAAM,WACtF,kBAAC,EAAD,CAASC,MAAM,gBAAgBC,KAAI,WAAMuE,GAActE,KAAK,cAAcH,MAAM,aAGlF,yBAAK1C,UAAU,OACb,kBAAC,EAAD,CAAS2C,MAAM,QAAQC,KAAM6F,EAAWtJ,WAAY0D,KAAK,SAASH,MAAM,YACxE,kBAAC,EAAD,CAASC,MAAM,eAAeC,KAAMgG,EAAiBzJ,WAAY0D,KAAK,aAAaH,MAAM,YAG3F,yBAAK1C,UAAU,OAEb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,mCAAd,iBAEF,yBAAKA,UAAU,aACb,kBAAC,EAAD,SAMN,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,mCAAd,eAEF,yBAAKA,UAAU,aACb,kBAAC,EAAD,YCdC6I,GAtCiB,WAC9B,IAAMzI,EAA0BC,cAIhC,SAASyI,EAAkB5J,GACzBkB,EXLG,SAA4BlB,GAC/B,MAAO,CAAEI,KAAMmG,EAAqBvG,GAAIA,GWI/B6J,CAAmB7J,IAG9B,IAAM8J,EAPiCzH,aAAY,SAACC,GAAD,OACjDA,EAAMyH,cAAcA,iBAMiBtF,KAAI,SAAAuF,GACzC,OACE,yBAAKlJ,UAAU,QAAQ4D,IAAG,uBAAkBsF,EAAahK,KACvD,yBAAKc,UAAU,gBACb,uBAAGA,UAAU,sBACb,4BAAQA,UAAU,WAAWkJ,EAAavG,OAC1C,+BAAQuG,EAAaC,KAAKC,mBAAmBC,UAAUC,SAAU,CAAEC,KAAM,UAAWC,OAAQ,aAC5F,4BAAQlK,KAAK,SACXU,UAAU,kBACVyJ,eAAa,QACbC,aAAW,QACXvI,QAAS,kBAAM2H,EAAkBI,EAAahK,MAC9C,0BAAMyK,cAAY,QAAlB,UAGJ,yBAAK3J,UAAU,cACZkJ,EAAatG,UAMtB,OACE,yBAAK5C,UAAU,iBACZgJ,ICNQY,GAvBS,WAEtB,OACE,kBAAC,WAAD,KACE,kBAACC,GAAD,MACA,kBAAC,EAAD,MACA,yBAAK3K,GAAG,kBAAkBc,UAAU,sBAClC,yBAAKd,GAAG,WACN,kBAAC,EAAD,MACA,yBAAKc,UAAU,mBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiH,KAAI,UAAY,kBAAC,EAAD,OACvB,kBAAC,IAAD,CAAOA,KAAI,aAAe,kBAAC,EAAD,OAC1B,kBAAC,IAAD,CAAOA,KAAI,WAAa,kBAAC,GAAD,OACxB,kBAAC,IAAD,CAAOA,KAAK,KAAI,kBAAC,GAAD,a,SChBvB,SAAS6C,GAAT,GAAuE,IAA/CC,EAA8C,EAA9CA,SAAaC,EAAiC,6BAEnEvI,EAAoBF,aAAY,SAACC,GAAD,OAAuBA,EAAMC,WAEnE,OACI,kBAAC,IAAD,iBACQuI,EADR,CAEIC,OAAQ,kBACJxI,EAAQnB,MACJyJ,EACA,kBAAC,EAAD,UCVb,SAASG,GAAT,GAAsE,EAA9CH,SAA+C,IAAlCC,EAAiC,6BAEnEvI,EAAoBF,aAAY,SAACC,GAAD,OAAuBA,EAAMC,WAEnE,OACI,kBAAC,IAAD,iBACQuI,EADR,CAEIC,OAAQ,kBACJxI,EAAQnB,MACJ,kBAAC,IAAD,CACIe,GAAI,CACA8I,SAAU,iBAGlB,kBAAC,EAAD,UCbpB,IAeeC,GAfO,WACpB,OACE,yBAAKpK,UAAU,MAAMd,GAAG,WACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC4K,GAAD,CAAc7C,KAAK,KACjB,kBAAC,GAAD,OAEF,kBAACiD,GAAD,CAAcjD,KAAK,UAAS,kBAAC,EAAD,WCLlBoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wmBCXN,IAAMC,GAA8B,CAChClE,kBAAmBtC,EAA0B2C,KAC7CvC,gBAAiB,KACjBH,SAAU,CAAC,CACPjF,GAAI,EAAGsF,KAAM,YAAakC,YAAa,oCACvChC,OAAQ,GAAIC,MAAO,EAAGgC,eAAe,EAAMlC,SAAU,SAEzD,CACIvF,GAAI,EAAGsF,KAAM,QAASkC,YAAa,kCACnChC,OAAQ,EAAGC,MAAO,EAAGgC,eAAe,EAAMlC,SAAU,SAExD,CACIvF,GAAI,EAAGsF,KAAM,QAASkC,YAAa,kDACnChC,OAAQ,IAAKC,MAAO,EAAGgC,eAAe,EAAOlC,SAAU,WAE3D,CACIvF,GAAI,EAAGsF,KAAM,QAASkC,YAAa,8CACnChC,OAAQ,EAAGC,MAAO,EAAGgC,eAAe,EAAOlC,SAAU,WAEzD,CACIvF,GAAI,EAAGsF,KAAM,QAASkC,YAAa,kDACnChC,OAAQ,GAAIC,MAAO,EAAGgC,eAAe,EAAMlC,SAAU,WAyC9CkG,OArCf,WAAmG,IAA1EnJ,EAAyE,uDAAlDkJ,GAAcE,EAAoC,uCAC9F,OAAQA,EAAOtL,MACX,KAAKsF,EACD,IAAIiG,EAAgBC,KAAKhF,IAAIiF,MAAMD,KAAMtJ,EAAM2C,SAASR,KAAI,SAASqH,GAAK,OAAOA,EAAE9L,OAEnF,OADA0L,EAAOvG,QAAQnF,GAAK2L,EAAQ,EACrB,MAAKrJ,EAAZ,CAAmB2C,SAAS,GAAD,oBAAM3C,EAAM2C,UAAZ,CAAsByG,EAAOvG,YAE5D,KAAKQ,EACD,IAAMoG,EAAqBzJ,EAAM2C,SAAS+G,WAAU,SAAAC,GAAE,OAAIA,EAAGjM,KAAO0L,EAAOvG,QAAQnF,MAC/EiF,EAAuB3C,EAAM2C,SAEjC,OADAA,EAAS8G,GAAcL,EAAOvG,QACvB,MAAK7C,EAAZ,CAAmB2C,SAAUA,IAEjC,KAAKW,EACD,OAAO,MAAKtD,EAAZ,CAAmB2C,SAAU3C,EAAM2C,SAASiH,QAAO,SAAAD,GAAE,OAAIA,EAAGjM,KAAO0L,EAAO1L,QAE9E,KAAK8F,EACD,OAAO,MAAKxD,EAAZ,CAAmB8C,gBAAiBsG,EAAOvG,UAE/C,KAAKY,EACD,OAAO,MAAKzD,EAAZ,CAAmB8C,gBAAiB,OAExC,KAAKY,EACD,OAAO,MAAK1D,EAAZ,CAAmBgF,kBAAmBoE,EAAOvL,QAEjD,KAAK0F,EACD,IAAMkG,EAAqBzJ,EAAM2C,SAAS+G,WAAU,SAAAC,GAAE,OAAIA,EAAGjM,KAAO0L,EAAO1L,MACvEiF,EAAuB3C,EAAM2C,SAEjC,OADAA,EAAS8G,GAAYvG,OAASP,EAAS8G,GAAYvG,OAASkG,EAAOlG,OAC5D,MAAKlD,EAAZ,CAAmB2C,SAAUA,IAEjC,QACI,OAAO3C,I,6jBC7DnB,IAAMkJ,GAAmC,CACrCzB,cAAe,CAAC,CAAC/J,GAAI,EAAGiK,KAAM,IAAIkC,KAAQzI,KAAM,iBAAkBD,MAAO,aA0B9D2I,OAvBf,WAAiH,IAApF9J,EAAmF,uDAAvDkJ,GAAcE,EAAyC,uCAC5G,OAAQA,EAAOtL,MACX,KAAKkG,EACD,IAAIqF,EAAeC,KAAKhF,IAAIiF,MAAMD,KAAMtJ,EAAMyH,cAActF,KAAI,SAAAqH,GAAC,OAAKA,EAAE9L,OACrE2L,KAAWU,MAAYV,EAAQ,GAClC,IAAIW,EAAU,CACVtM,GAAI2L,EAAQ,EACZ1B,KAAM,IAAIkC,KACV1I,MAAOiI,EAAOjI,MACdC,KAAMgI,EAAOhI,MAEjB,OAAO,MAAIpB,EAAX,CAAkByH,cAAc,GAAD,oBAAMzH,EAAMyH,eAAZ,CAA2BuC,MAE9D,KAAK/F,EACD,OAAO,MAAIjE,EAAX,CAAkByH,cAAezH,EAAMyH,cAClCmC,QAAO,SAAAvB,GAAY,OAAIA,EAAa3K,KAAO0L,EAAO1L,QAE3D,QACI,OAAOsC,I,6jBCtBnB,IAAMkJ,GAA2B,CAC7BvH,MAAO,CACH,CAAEjE,GAAI,EAAG4E,UAAW,OAAQC,SAAU,QAASzD,MAAO,gBACtD,CAAEpB,GAAI,EAAG4E,UAAW,UAAWC,SAAU,OAAQzD,MAAO,eAE5D8C,OAAQ,CACJ,CAAElE,GAAI,EAAG4E,UAAW,SAAUC,SAAU,QAASzD,MAAO,kBAiBjDmL,OAbf,WAAyF,IAApEjK,EAAmE,uDAA/CkJ,GAAcE,EAAiC,uCACpF,OAAQA,EAAOtL,MACX,KAAKwD,EACD,OAAO,MAAKtB,EAAZ,CAAmB2B,MAAO3B,EAAM2B,MAAMiI,QAAO,SAAAM,GAAC,OAAEA,EAAExM,KAAO0L,EAAOtH,KAAKpE,MAAKkE,OAAO,GAAD,oBAAM5B,EAAM4B,QAAZ,CAAoBwH,EAAOtH,SAE/G,KAAKP,EACD,OAAO,MAAKvB,EAAZ,CAAmB4B,OAAQ5B,EAAM4B,OAAOgI,QAAO,SAAAM,GAAC,OAAEA,EAAExM,KAAO0L,EAAOtH,KAAKpE,MAAKiE,MAAM,GAAD,oBAAM3B,EAAM2B,OAAZ,CAAmByH,EAAOtH,SAE/G,QACI,OAAO9B,I,6jBClBnB,IAAMkJ,GAA6B,CAC/BzC,OAAQ,CACJ,CACI/I,GAAI,EACJsF,KAAM,cACNE,OAAQ,GACRyC,WAAY,IACZ9C,QAAS,CACLnF,GAAI,EAAGsF,KAAM,QAASkC,YAAa,kCACnChC,OAAQ,EAAGC,MAAO,EAAGgC,eAAe,EAAMlC,SAAU,UAG5D,CACIvF,GAAI,EACJsF,KAAM,cACNE,OAAQ,EACRyC,WAAY,EACZ9C,QAAS,CACLnF,GAAI,EAAGsF,KAAM,QAASkC,YAAa,kDACnChC,OAAQ,IAAKC,MAAO,EAAGgC,eAAe,EAAOlC,SAAU,cAmBxDkH,OAbf,WAA8F,IAAxEnK,EAAuE,uDAAjDkJ,GAAcE,EAAmC,uCACzF,OAAQA,EAAOtL,MACX,KAAK6I,EACD,IAAI0C,EAAgBC,KAAKhF,IAAIiF,MAAMD,KAAMtJ,EAAMyG,OAAOtE,KAAI,SAACqH,GAAQ,OAAOA,EAAE9L,OAE5E,OADG2L,KAAWU,MAAYV,EAAQ,GAC3B,MAAIrJ,EAAX,CAAkByG,OAAO,GAAD,oBAAMzG,EAAMyG,QAAZ,OAAwB2C,EAAO1C,MAA/B,CAAsChJ,GAAI2L,EAAQ,QAE9E,QACI,OAAOrJ,I,6jBCjCnB,IAAMkJ,GAAyB,CAC3BpK,MAAO,2BAiBIsL,OAdf,WAAwF,IAAhEpK,EAA+D,uDAA7CkJ,GAAcE,EAA+B,uCACnF,OAAQA,EAAOtL,MACX,KAAKjB,EACD,OAAO,MAAKmD,EAAZ,CAAmBlB,MAAQsK,EAAOtK,QAEtC,KAAKhC,EACD,OAAO,MAAKkD,EAAZ,CAAmBlB,MAAO,KAE9B,QACI,OAAOkB,I,+NCPnB,IAAMkJ,GAA+B,CACjCrI,KAAM,CAACE,KAAM,OAAQC,QAAS,KAYlC,IAUeqJ,GAV2BC,aAAgB,CAACxJ,KAT3D,WAAiG,IAA5Ed,EAA2E,uDAAnDkJ,GAAcE,EAAqC,uCAC5F,OAAQA,EAAOtL,MACX,KAAK0D,EACD,O,2VAAO,IAAKxB,EAAZ,CAAmBa,KAAM,CAACE,KAAMqI,EAAOrI,KAAMC,QAASoI,EAAOpI,WACjE,QACI,OAAOhB,IAKf2C,SAAUwG,GACV1B,cAAeqC,GACfnI,MAAOsI,GACPxD,OAAQ0D,GACRlK,QAASmK,KCvBPG,GAAeC,aAAYH,GAAcI,aAC3CC,OAGJH,GAAMI,WAAU,eACDJ,UCEfK,IAASnC,OAAO,kBAAC,IAAD,CAAU8B,MAAOA,IAAO,kBAAC,GAAD,OAAoBM,SAASC,eAAe,SR6H9E,kBAAmBjD,WACrBA,UAAUkD,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fd94b9be.chunk.js","sourcesContent":["export const LOG_IN: string = \"LOG_IN\";\r\nexport const LOG_OUT: string = \"LOG_OUT\";\r\n\r\nexport function login(email: string): ILogInActionType {\r\n    return { type: LOG_IN, email: email };\r\n}\r\n\r\nexport function logout(): ILogOutActionType {\r\n    return { type: LOG_OUT};\r\n}\r\n\r\ninterface ILogInActionType { type: string, email: string };\r\ninterface ILogOutActionType { type: string };\r\n","import React, { useState, ChangeEvent } from \"react\";\r\nimport { TextInputProps } from \"../types/TextInput.types\";\r\n\r\nfunction TextInput(props: TextInputProps): JSX.Element {\r\n    const [touched, setTouch] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n    const [htmlClass, setHtmlClass] = useState(\"\");\r\n    const [, setValue] = useState(\"\");\r\n\r\n\r\n    function onValueChanged(event: ChangeEvent<HTMLInputElement>): void {\r\n        let [error, validClass, elementValue] = [\"\", \"\", event.target.value];\r\n\r\n        [error, validClass] = (!elementValue && props.required) ?\r\n            [\"Value cannot be empty\", \"is-invalid\"] : [\"\", \"is-valid\"];\r\n\r\n        if (!error) {\r\n            [error, validClass] = (props.maxLength && elementValue && elementValue.length > (props.maxLength)) ?\r\n            [`Value can't have more than ${props.maxLength} characters`, \"is-invalid\"] : [\"\", \"is-valid\"];\r\n        }\r\n\r\n        props.onChange({ value: elementValue, error: error, touched: touched, field: props.field });\r\n\r\n        setTouch(true);\r\n        setError(error);\r\n        setHtmlClass(validClass);\r\n        setValue(elementValue);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor={props.id.toString()}>{props.label}</label>\r\n            <input\r\n                value={props.value}\r\n                type={props.type}\r\n                onChange={onValueChanged}\r\n                className={`form-control ${props.inputClass} ${htmlClass}`}\r\n                id={`id_${props.label}`}\r\n                placeholder={props.placeholder} />\r\n            {error ?\r\n                <div className=\"invalid-feedback\">\r\n                    {error}\r\n                </div> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextInput;","import React, { useState, FormEvent, Dispatch } from \"react\";\r\nimport { OnChangeModel } from \"../../common/types/Form.types\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { login } from \"../../store/actions/account.actions\";\r\nimport TextInput from \"../../common/components/TextInput\";\r\n\r\nconst Login: React.FC = () => {\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n\r\n  const [formState, setFormState] = useState({\r\n    email: { error: \"\", value: \"\" },\r\n    password: { error: \"\", value: \"\" }\r\n  });\r\n\r\n  function hasFormValueChanged(model: OnChangeModel): void {\r\n    setFormState({ ...formState, [model.field]: { error: model.error, value: model.value } });\r\n  }\r\n\r\n  function submit(e: FormEvent<HTMLFormElement>): void {\r\n    e.preventDefault();\r\n    if(isFormInvalid()) { return; }\r\n    dispatch(login(formState.email.value));\r\n  }\r\n\r\n  function isFormInvalid() {\r\n    return (formState.email.error || formState.password.error\r\n      || !formState.email.value || !formState.password.value);\r\n  }\r\n\r\n  function getDisabledClass(): string {\r\n    let isError: boolean = isFormInvalid() as boolean;\r\n    return isError ? \"disabled\" : \"\";\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"container\">\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-xl-10 col-lg-12 col-md-9\">\r\n          <div className=\"card o-hidden border-0 shadow-lg my-5\">\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 d-none d-lg-block bg-login-image\"></div>\r\n                <div className=\"col-lg-6\">\r\n                  <div className=\"p-5\">\r\n                    <div className=\"text-center\">\r\n                      <h1 className=\"h4 text-gray-900 mb-4\">Welcome!</h1>\r\n                    </div>\r\n                    <form className=\"user\" onSubmit={submit}>\r\n                      <div className=\"form-group\">\r\n\r\n                        <TextInput id=\"input_email\"\r\n                          field=\"email\"\r\n                          value={formState.email.value}\r\n                          onChange={hasFormValueChanged}\r\n                          required={true}\r\n                          maxLength={100}\r\n                          label=\"Email\"\r\n                          placeholder=\"Email\" />\r\n                      </div>\r\n                      <div className=\"form-group\">\r\n                        <TextInput id=\"input_password\"\r\n                          field=\"password\"\r\n                          value={formState.password.value}\r\n                          onChange={hasFormValueChanged}\r\n                          required={true}\r\n                          maxLength={100}\r\n                          type=\"password\"\r\n                          label=\"Password\"\r\n                          placeholder=\"Password\" />\r\n                      </div>\r\n                      <div className=\"form-group\">\r\n                        <div className=\"custom-control custom-checkbox small\">\r\n                          <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck\" />\r\n                          <label className=\"custom-control-label\"\r\n                            htmlFor=\"customCheck\">Remember Me</label>\r\n                        </div>\r\n                      </div>\r\n                      <button\r\n                        className={`btn btn-primary btn-user btn-block ${getDisabledClass()}`}\r\n                        type=\"submit\">\r\n                        Login\r\n                      </button>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst LeftMenu: React.FC = () => {\r\n\r\n    let [leftMenuVisibility, setLeftMenuVisibility] = useState(false);\r\n\r\n    function changeLeftMenuVisibility() {\r\n        setLeftMenuVisibility(!leftMenuVisibility);\r\n    }\r\n\r\n    function getCollapseClass() {\r\n        return (leftMenuVisibility) ? \"\" : \"collapsed\";\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"toggle-area\">\r\n                <button className=\"btn btn-primary toggle-button\" onClick={() => changeLeftMenuVisibility()}>\r\n                    <i className=\"fas fa-bolt\"></i>\r\n                </button>\r\n            </div>\r\n\r\n            <ul className={`navbar-nav bg-gradient-primary-green sidebar sidebar-dark accordion ${getCollapseClass()}`}\r\n                id=\"collapseMenu\">\r\n\r\n                <a className=\"sidebar-brand d-flex align-items-center justify-content-center\" href=\"index.html\">\r\n                    <div className=\"sidebar-brand-icon icon-green rotate-n-15\">\r\n                        <i className=\"fas fa-bolt\"></i>\r\n                    </div>\r\n                    <div className=\"sidebar-brand-text mx-3\">REACT <sup>Admin</sup></div>\r\n                </a>\r\n\r\n                <hr className=\"sidebar-divider my-0\" />\r\n\r\n                <li className=\"nav-item active\">\r\n\r\n                    <Link className=\"nav-link\" to=\"Home\">\r\n                        <i className=\"fas fa-fw fa-tachometer-alt\"></i>\r\n                        <span>Dashboard</span>\r\n                    </Link>\r\n                </li>\r\n\r\n                <hr className=\"sidebar-divider\" />\r\n                <div className=\"sidebar-heading\">\r\n                    Warehouse\r\n                </div>\r\n\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to={`/products`}>\r\n                        <i className=\"fas fa-fw fa-warehouse\"></i>\r\n                        <span>Products</span>\r\n                    </Link>\r\n                </li>\r\n\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to={`/orders`}>\r\n                        <i className=\"fas fa-fw fa-dollar-sign\"></i>\r\n                        <span>Orders</span>\r\n                    </Link>\r\n                </li>\r\n\r\n                <hr className=\"sidebar-divider\" />\r\n\r\n                <div className=\"sidebar-heading\">\r\n                    Admin\r\n                </div>\r\n\r\n\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to={`/users`}>\r\n                        <i className=\"fas fa-fw fa-user\"></i>\r\n                        <span>Users</span>\r\n                    </Link>\r\n                </li>\r\n\r\n                <hr className=\"sidebar-divider d-none d-md-block\" />\r\n            </ul>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default LeftMenu;\r\n","import React, { useState, Dispatch } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout } from \"../../store/actions/account.actions\";\r\nimport { IStateType } from \"../../store/models/root.interface\";\r\n\r\nfunction TopMenuAccount(): JSX.Element {\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n  const email: string = useSelector((state: IStateType) => state.account.email);\r\n  const [isShow, setShow] = useState(false);\r\n\r\n  return (\r\n\r\n    <li className=\"nav-item dropdown no-arrow\">\r\n      <a className=\"nav-link dropdown-toggle\"\r\n        onClick={() => {\r\n          setShow(!isShow);\r\n        }}\r\n        href=\"# \"\r\n        id=\"userDropdown\"\r\n        role=\"button\"\r\n        data-toggle=\"dropdown\"\r\n        aria-haspopup=\"true\"\r\n        aria-expanded=\"false\">\r\n        <span className=\"mr-2 d-none d-lg-inline small cadet\">{email}</span>\r\n        <img className=\"img-profile rounded-circle\" alt=\"\"\r\n          src=\"https://source.unsplash.com/QAB-WJcbgJk/60x60\" />\r\n      </a>\r\n\r\n      <div className={`dropdown-menu dropdown-menu-right shadow animated--grow-in ${(isShow) ? \"show\" : \"\"}`}\r\n        aria-labelledby=\"userDropdown\">\r\n        <a className=\"dropdown-item\"\r\n        onClick={() => dispatch(logout())}\r\n        href=\"# \" \r\n        data-toggle=\"modal\"\r\n        data-target=\"#logoutModal\">\r\n          <i className=\"fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400\"></i>\r\n          Logout\r\n        </a>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TopMenuAccount;\r\n","import React from \"react\";\r\nimport TopMenuAccount from \"./TopMenuAccount\";\r\nimport \"./TopMenu.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IStateType, IRootPageStateType } from \"../../store/models/root.interface\";\r\n\r\nconst TopMenu: React.FC = () => {\r\n  const page: IRootPageStateType = useSelector((state: IStateType) => state.root.page);\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand navbar-light bg-custom-dark topbar mb-4 static-top shadow\">\r\n      <ol className=\"breadcrumb dark-breadcrumb\">\r\n        <li className=\"breadcrumb-item\"><a href=\"# \">{page ? page.area : null}</a></li>\r\n        <li className=\"breadcrumb-item\"><a href=\"# \">{page ? page.subArea : null}</a></li>\r\n      </ol>\r\n\r\n      <ul className=\"navbar-nav ml-auto\">\r\n        <div className=\"topbar-divider d-none d-sm-block\"></div>\r\n        <TopMenuAccount />\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default TopMenu;\r\n","import React, { PropsWithChildren, ReactElement } from \"react\";\r\nimport { ICardProperties } from \"../types/TopCard.types\";\r\n\r\nfunction TopCard(props: PropsWithChildren<ICardProperties>): ReactElement {\r\n    return (\r\n        <div className=\"col-xl-3 col-md-6 mb-4\">\r\n            <div className={`card border-left-${props.class} shadow h-100 py-2 `}>\r\n                <div className=\"card-body\">\r\n                    <div className=\"row no-gutters align-items-center\">\r\n                        <div className=\"col mr-2\">\r\n                            <div className=\"text-xs font-weight-bold text-green text-uppercase mb-1\">{props.title}</div>\r\n                            <div className=\"h5 mb-0 font-weight-bold text-gray-800\">{props.text}</div>\r\n                        </div>\r\n                        <div className=\"col-auto\">\r\n                            <i className={`fas fa-${props.icon} fa-2x text-gray-300`}></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default TopCard;\r\n","import { IUser } from \"../models/user.interface\";\r\n\r\nexport const ADD_ADMIN: string = \"ADD_ADMIN\";\r\nexport const REMOVE_ADMIN: string = \"REMOVE_ADMIN\";\r\n\r\nexport function addAdmin(user: IUser): IAddAdminActionType {\r\n    return { type: ADD_ADMIN, user: user };\r\n}\r\n\r\nexport function removeAdmin(user: IUser): IRemoveAdminActionType {\r\n    return { type: REMOVE_ADMIN, user: user };\r\n}\r\n\r\n\r\ninterface IAddAdminActionType { type: string, user: IUser };\r\ninterface IRemoveAdminActionType { type: string, user: IUser };\r\n","export const UPDATE_CURRENT_PATH: string = \"UPDATE_CURRENT_PATH\";\r\n\r\nexport function updateCurrentPath(area: string, subArea: string): IUpdateCurrentPathActionType {\r\n    return { type: UPDATE_CURRENT_PATH, area: area, subArea: subArea };\r\n}\r\n\r\n\r\ninterface IUpdateCurrentPathActionType { type: string, area: string, subArea: string };","import React, { Fragment, Dispatch } from \"react\";\r\nimport TopCard from \"../../common/components/TopCard\";\r\nimport { IUser } from \"../../store/models/user.interface\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IStateType } from \"../../store/models/root.interface\";\r\nimport { addAdmin, removeAdmin } from \"../../store/actions/users.action\";\r\nimport { updateCurrentPath } from \"../../store/actions/root.actions\";\r\n\r\nconst Users: React.FC = () => {\r\n\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n  dispatch(updateCurrentPath(\"user\", \"list\"));\r\n  \r\n  const users: IUser[] = useSelector((state: IStateType) => state.users.users);\r\n  const admins: IUser[] = useSelector((state: IStateType) => state.users.admins);\r\n\r\n  function setUserAdmin(user: IUser): void {\r\n    dispatch(addAdmin(user));\r\n  }\r\n\r\n  function setUserNotAdmin(admin: IUser): void {\r\n    dispatch(removeAdmin(admin)); \r\n  }\r\n\r\n  const userElements: JSX.Element[] = users.map(user => {\r\n    return (\r\n      <tr className={`table-row`}\r\n        key={`user_${user.id}`}>\r\n        <th scope=\"row\">{user.id}</th>\r\n        <td>{user.firstName}</td>\r\n        <td>{user.lastName}</td>\r\n        <td>{user.email}</td>\r\n        <td><button className=\"btn btn-success\" onClick={() => setUserAdmin(user)}>Set admin</button> </td>\r\n      </tr>);\r\n  });\r\n\r\n  const adminElements: JSX.Element[] = admins.map(admin => {\r\n    return (\r\n      <tr className={`table-row`}\r\n        key={`user_${admin.id}`}>\r\n        <th scope=\"row\">{admin.id}</th>\r\n        <td>{admin.firstName}</td>\r\n        <td>{admin.lastName}</td>\r\n        <td>{admin.email}</td>\r\n        <td><button className=\"btn btn-danger\" onClick={() => setUserNotAdmin(admin)}>Revert admin</button> </td>\r\n      </tr>);\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"h3 mb-2 text-gray-800\">Users</h1>\r\n      <p className=\"mb-4\">Users here</p>\r\n\r\n      <div className=\"row\">\r\n        <TopCard title=\"ADMINS\" text={admins.length.toString()} icon=\"user-tie\" class=\"primary\" />\r\n        <TopCard title=\"USER\" text={users.length.toString()} icon=\"user\" class=\"danger\" />\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-lg-12\">\r\n          <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n              <h6 className=\"m-0 font-weight-bold text-green\">Admin List</h6>\r\n              <div className=\"header-buttons\">\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <div className=\"table-responsive portlet\">\r\n                <table className=\"table\">\r\n                  <thead className=\"thead-light\">\r\n                    <tr>\r\n                      <th scope=\"col\">#</th>\r\n                      <th scope=\"col\">First name</th>\r\n                      <th scope=\"col\">Last name</th>\r\n                      <th scope=\"col\">Email</th>\r\n                      <th scope=\"col\">Admin</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {adminElements}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-lg-12\">\r\n          <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n              <h6 className=\"m-0 font-weight-bold text-green\">User List</h6>\r\n              <div className=\"header-buttons\">\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <div className=\"table-responsive portlet\">\r\n                <table className=\"table\">\r\n                  <thead className=\"thead-light\">\r\n                    <tr>\r\n                      <th scope=\"col\">#</th>\r\n                      <th scope=\"col\">First name</th>\r\n                      <th scope=\"col\">Last name</th>\r\n                      <th scope=\"col\">Email</th>\r\n                      <th scope=\"col\">Admin</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {userElements}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment >\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IStateType, IProductState } from \"../../store/models/root.interface\";\r\nimport { IProduct } from \"../../store/models/product.interface\";\r\n\r\nexport type productListProps = {\r\n  onSelect?: (product: IProduct) => void;\r\n  children?: React.ReactNode;\r\n};\r\n\r\nfunction ProductList(props: productListProps): JSX.Element  {\r\n  const products: IProductState = useSelector((state: IStateType) => state.products);\r\n\r\n  const productElements: (JSX.Element | null)[] = products.products.map(product => {\r\n    if (!product) { return null; }\r\n    return (<tr className={`table-row ${(products.selectedProduct && products.selectedProduct.id === product.id) ? \"selected\" : \"\"}`}\r\n      onClick={() => {\r\n        if(props.onSelect) props.onSelect(product);\r\n      }}\r\n      key={`product_${product.id}`}>\r\n      <th scope=\"row\">{product.id}</th>\r\n      <td>{product.name}</td>\r\n      <td>{product.category}</td>\r\n      <td>{product.amount}</td>\r\n      <td>{product.price}</td>\r\n    </tr>);\r\n  });\r\n\r\n\r\n  return (\r\n    <div className=\"table-responsive portlet\">\r\n      <table className=\"table\">\r\n        <thead className=\"thead-light\">\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th scope=\"col\">Category</th>\r\n            <th scope=\"col\">Amount</th>\r\n            <th scope=\"col\">Price</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {productElements}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n","export interface IProduct {\r\n    id: number;\r\n    name: string;\r\n    category: string;\r\n    description: string;\r\n    amount: number;\r\n    price: number;\r\n    hasExpiryDate: boolean;\r\n}\r\n\r\nexport enum ProductModificationStatus {\r\n    None = 0,\r\n    Create = 1,\r\n    Edit = 2\r\n}","import { IProduct, ProductModificationStatus } from \"../models/product.interface\";\r\nexport const ADD_PRODUCT: string = \"ADD_PRODUCT\";\r\nexport const EDIT_PRODUCT: string = \"EDIT_PRODUCT\";\r\nexport const REMOVE_PRODUCT: string = \"REMOVE_PRODUCT\";\r\nexport const CHANGE_PRODUCT_AMOUNT: string = \"CHANGE_PRODUCT_AMOUNT\";\r\nexport const CHANGE_PRODUCT_PENDING_EDIT: string = \"CHANGE_PRODUCT_PENDING_EDIT\";\r\nexport const CLEAR_PRODUCT_PENDING_EDIT: string = \"CLEAR_PRODUCT_PENDING_EDIT\";\r\nexport const SET_MODIFICATION_STATE: string = \"SET_MODIFICATION_STATE\";\r\n\r\nexport function addProduct(product: IProduct): IAddProductActionType {\r\n    return { type: ADD_PRODUCT, product: product };\r\n}\r\n\r\nexport function editProduct(product: IProduct): IEditProductActionType {\r\n    return { type: EDIT_PRODUCT, product: product };\r\n}\r\n\r\nexport function removeProduct(id: number): IRemoveProductActionType {\r\n    return { type: REMOVE_PRODUCT, id: id };\r\n}\r\n\r\nexport function changeProductAmount(id: number, amount: number): IChangeProductAmountType {\r\n    return { type: CHANGE_PRODUCT_AMOUNT, id: id, amount: amount };\r\n}\r\n\r\nexport function changeSelectedProduct(product: IProduct): IChangeSelectedProductActionType {\r\n    return { type: CHANGE_PRODUCT_PENDING_EDIT, product: product };\r\n}\r\n\r\nexport function clearSelectedProduct(): IClearSelectedProductActionType {\r\n    return { type: CLEAR_PRODUCT_PENDING_EDIT };\r\n}\r\n\r\nexport function setModificationState(value: ProductModificationStatus): ISetModificationStateActionType {\r\n    return { type: SET_MODIFICATION_STATE, value: value };\r\n}\r\n\r\ninterface IAddProductActionType { type: string, product: IProduct };\r\ninterface IEditProductActionType { type: string, product: IProduct };\r\ninterface IRemoveProductActionType { type: string, id: number };\r\ninterface IChangeSelectedProductActionType { type: string, product: IProduct };\r\ninterface IClearSelectedProductActionType { type: string };\r\ninterface ISetModificationStateActionType { type: string, value:  ProductModificationStatus};\r\ninterface IChangeProductAmountType {type: string, id: number, amount: number};","export const ADD_NOTIFICATION: string = \"ADD_NOTIFICATION\";\r\nexport const REMOVE_NOTIFICATION: string = \"REMOVE_NOTIFICATION\";\r\n\r\nexport function addNotification(title: string, text: string): IAddNotificationActionType {\r\n    return { type: ADD_NOTIFICATION, text: text, title: title };\r\n}\r\n\r\nexport function removeNotification(id: number): IRemoveNotificationActionType {\r\n    return { type: REMOVE_NOTIFICATION, id: id };\r\n}\r\n\r\ninterface IAddNotificationActionType { type: string, text: string, title: string };\r\ninterface IRemoveNotificationActionType { type: string, id: number };\r\n","import React, { useState, ChangeEvent } from \"react\";\r\nimport { NumberInputProps } from \"../types/NumberInput.types\";\r\n\r\nfunction NumberInput(props: NumberInputProps): JSX.Element {\r\n    const [touched, setTouch] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n    const [htmlClass, setHtmlClass] = useState(\"\");\r\n    const [, setValue] = useState(0);\r\n\r\n\r\n    function onValueChanged(event: ChangeEvent<HTMLInputElement>): void {\r\n        let elementValue: number = (isNaN(Number(event.target.value))) ? 0 : Number(event.target.value);\r\n        let [error, validClass] = [\"\", \"\"];\r\n\r\n        if (!error) {\r\n            [error, validClass] = ((props.max != null) && elementValue > (props.max)) ?\r\n            [`Value can't be higher than ${props.max} `, \"is-invalid\"] : [\"\", \"is-valid\"];\r\n        }\r\n\r\n        if (!error) {\r\n            [error, validClass] = ((props.min != null) && elementValue < (props.min)) ?\r\n            [`Value can't be lower than ${props.min} `, \"is-invalid\"] : [\"\", \"is-valid\"];\r\n        }\r\n\r\n        props.onChange({ value: elementValue, error: error, touched: touched, field: props.field });\r\n\r\n        setTouch(true);\r\n        setError(error);\r\n        setHtmlClass(validClass);\r\n        setValue(elementValue);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor={props.id.toString()}>{props.label}</label>\r\n            <input\r\n                value={props.value}\r\n                type=\"number\"\r\n                onChange={onValueChanged}\r\n                className={`form-control ${props.inputClass} ${htmlClass}`}\r\n                id={`id_${props.label}`}/>\r\n            {error ?\r\n                <div className=\"invalid-feedback\">\r\n                    {error}\r\n                </div> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NumberInput;","import React, { useState, ChangeEvent } from \"react\";\r\nimport { CheckboxProps } from \"../types/Checkbox.types\";\r\n\r\nfunction Checkbox(props: CheckboxProps): JSX.Element {\r\n    const [touched, setTouch] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n    const [htmlClass, setHtmlClass] = useState(\"\");\r\n    const [, setValue] = useState(false);\r\n\r\n\r\n    function onValueChanged(event: ChangeEvent<HTMLInputElement>): void {\r\n        let [error, validClass, elementValue] = [\"\", \"\", event.target.checked];\r\n\r\n        [error, validClass] = (!elementValue && props.required) ?\r\n            [\"Value has to be checked\", \"is-invalid\"] : [\"\", \"is-valid\"];\r\n\r\n\r\n        props.onChange({ value: elementValue, error: error, touched: touched, field: props.field });\r\n\r\n        setTouch(true);\r\n        setError(error);\r\n        setHtmlClass(validClass);\r\n        setValue(elementValue);\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-check\">\r\n            <input\r\n                className={`form-check-input ${props.inputClass ? props.inputClass : \"\"} ${htmlClass}`}\r\n                type=\"checkbox\"\r\n                id={`id_${props.label}`}\r\n                checked={props.value}\r\n                onChange={onValueChanged} />\r\n            <label className=\"form-check-label\" htmlFor={props.id.toString()}>\r\n                {props.label}\r\n            </label>\r\n\r\n            {error ?\r\n                <div className=\"invalid-feedback\">\r\n                    {error}\r\n                </div> : null\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Checkbox;","import React, { useState, ChangeEvent, Fragment } from \"react\";\r\nimport { SelectProps } from \"../types/Select.types\";\r\n\r\nfunction SelectInput(props: SelectProps): JSX.Element {\r\n    const [touched, setTouch] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n    const [htmlClass, setHtmlClass] = useState(\"\");\r\n    const [value, setValue] = useState(props.value);\r\n\r\n\r\n    function onValueChanged(event: ChangeEvent<HTMLSelectElement>): void {\r\n        let [error, validClass, elementValue] = [\"\", \"\", event.target.value];\r\n\r\n        [error, validClass] = (!elementValue && props.required) ?\r\n            [\"Value has to be selected\", \"is-invalid\"] : [\"\", \"is-valid\"];\r\n\r\n\r\n        props.onChange({ value: elementValue, error: error, touched: touched, field: props.field });\r\n\r\n        setTouch(true);\r\n        setError(error);\r\n        setHtmlClass(validClass);\r\n        setValue(elementValue);\r\n    }\r\n\r\n    const getOptions: (JSX.Element | null)[] = props.options.map(option => {\r\n        return (\r\n            <option key={option} value={`${option}`}>{option}</option>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <Fragment>\r\n            <label htmlFor={`${props.id}`}>{props.label}</label>\r\n            <select\r\n                value={value}\r\n                id={`${props.id}`}\r\n                className={`form-control ${props.inputClass ? props.inputClass : \"\"} ${htmlClass}`}\r\n                onChange={onValueChanged}>\r\n                <option value=\"\">Choose...</option>\r\n                {getOptions}\r\n            </select>\r\n\r\n            {error ?\r\n                <div className=\"invalid-feedback\">\r\n                    {error}\r\n                </div> : null\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default SelectInput;","import React, { useState, FormEvent, Dispatch, Fragment } from \"react\";\r\nimport { IStateType, IProductState } from \"../../store/models/root.interface\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { IProduct, ProductModificationStatus } from \"../../store/models/product.interface\";\r\nimport TextInput from \"../../common/components/TextInput\";\r\nimport { editProduct, clearSelectedProduct, setModificationState, addProduct } from \"../../store/actions/products.action\";\r\nimport { addNotification } from \"../../store/actions/notifications.action\";\r\nimport NumberInput from \"../../common/components/NumberInput\";\r\nimport Checkbox from \"../../common/components/Checkbox\";\r\nimport SelectInput from \"../../common/components/Select\";\r\nimport { OnChangeModel, IProductFormState } from \"../../common/types/Form.types\";\r\n\r\nconst ProductForm: React.FC = () => {\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n  const products: IProductState | null = useSelector((state: IStateType) => state.products);\r\n  let product: IProduct | null = products.selectedProduct;\r\n  const isCreate: boolean = (products.modificationState === ProductModificationStatus.Create);\r\n  \r\n  if (!product || isCreate) {\r\n    product = { id: 0, name: \"\", description: \"\", amount: 0, price: 0, hasExpiryDate: false, category: \"\" };\r\n  }\r\n\r\n  const [formState, setFormState] = useState({\r\n    name: { error: \"\", value: product.name },\r\n    description: { error: \"\", value: product.description },\r\n    amount: { error: \"\", value: product.amount },\r\n    price: { error: \"\", value: product.price },\r\n    hasExpiryDate: { error: \"\", value: product.hasExpiryDate },\r\n    category: { error: \"\", value: product.category }\r\n  });\r\n\r\n  function hasFormValueChanged(model: OnChangeModel): void {\r\n    setFormState({ ...formState, [model.field]: { error: model.error, value: model.value } });\r\n  }\r\n\r\n  function saveUser(e: FormEvent<HTMLFormElement>): void {\r\n    e.preventDefault();\r\n    if (isFormInvalid()) {\r\n      return;\r\n    }\r\n\r\n    let saveUserFn: Function = (isCreate) ? addProduct : editProduct;\r\n    saveForm(formState, saveUserFn);\r\n  }\r\n\r\n  function saveForm(formState: IProductFormState, saveFn: Function): void {\r\n    if (product) {\r\n      dispatch(saveFn({\r\n        ...product,\r\n        name: formState.name.value,\r\n        description: formState.description.value,\r\n        price: formState.price.value,\r\n        amount: formState.amount.value,\r\n        hasExpiryDate: formState.hasExpiryDate.value,\r\n        category: formState.category.value\r\n      }));\r\n\r\n      dispatch(addNotification(\"Product edited\", `Product ${formState.name.value} edited by you`));\r\n      dispatch(clearSelectedProduct());\r\n      dispatch(setModificationState(ProductModificationStatus.None));\r\n    }\r\n  }\r\n\r\n  function cancelForm(): void {\r\n    dispatch(setModificationState(ProductModificationStatus.None));\r\n  }\r\n\r\n  function getDisabledClass(): string {\r\n    let isError: boolean = isFormInvalid();\r\n    return isError ? \"disabled\" : \"\";\r\n  }\r\n\r\n  function isFormInvalid(): boolean {\r\n    return (formState.amount.error || formState.description.error\r\n      || formState.name.error || formState.price.error || formState.hasExpiryDate.error\r\n      || formState.category.error || !formState.name.value || !formState.category.value) as boolean;\r\n}\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"col-xl-7 col-lg-7\">\r\n        <div className=\"card shadow mb-4\">\r\n          <div className=\"card-header py-3\">\r\n            <h6 className=\"m-0 font-weight-bold text-green\">Product {(isCreate ? \"create\" : \"edit\")}</h6>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <form onSubmit={saveUser}>\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group col-md-6\">\r\n                  <TextInput id=\"input_email\"\r\n                    value={formState.name.value}\r\n                    field=\"name\"\r\n                    onChange={hasFormValueChanged}\r\n                    required={true}\r\n                    maxLength={20}\r\n                    label=\"Name\"\r\n                    placeholder=\"Name\" />\r\n                </div>\r\n                <div className=\"form-group col-md-6\">\r\n                  <SelectInput\r\n                    id=\"input_category\"\r\n                    field=\"category\"\r\n                    label=\"Category\"\r\n                    options={[\"Fruit\", \"Sweet\", \"Kitchen\"]}\r\n                    required={true}\r\n                    onChange={hasFormValueChanged}\r\n                    value={formState.category.value}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <TextInput id=\"input_description\"\r\n                field = \"description\"\r\n                  value={formState.description.value}\r\n                  onChange={hasFormValueChanged}\r\n                  required={false}\r\n                  maxLength={100}\r\n                  label=\"Description\"\r\n                  placeholder=\"Description\" />\r\n              </div>\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group col-md-6\">\r\n                  <NumberInput id=\"input_amount\"\r\n                    value={formState.amount.value}\r\n                    field=\"amount\"\r\n                    onChange={hasFormValueChanged}\r\n                    max={1000}\r\n                    min={0}\r\n                    label=\"Amount\" />\r\n                </div>\r\n                <div className=\"form-group col-md-6\">\r\n                  <NumberInput id=\"input_price\"\r\n                    value={formState.price.value}\r\n                    field=\"price\"\r\n                    onChange={hasFormValueChanged}\r\n                    max={1000}\r\n                    min={0}\r\n                    label=\"Price\" />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <Checkbox\r\n                  id=\"checkbox_expiry\"\r\n                  field=\"hasExpiryDate\"\r\n                  value={formState.hasExpiryDate.value}\r\n                  label=\"Has expiry date\"\r\n                  onChange={hasFormValueChanged}\r\n                />\r\n              </div>\r\n              <button className=\"btn btn-danger\" onClick={() => cancelForm()}>Cancel</button>\r\n              <button type=\"submit\" className={`btn btn-success left-margin ${getDisabledClass()}`}>Save</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ProductForm;\r\n","import React, { Fragment, Dispatch, useState, useEffect } from \"react\";\r\nimport ProductList from \"./ProductsList\";\r\nimport ProductForm from \"./ProductsForm\";\r\nimport TopCard from \"../../common/components/TopCard\";\r\nimport \"./Products.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateCurrentPath } from \"../../store/actions/root.actions\";\r\nimport { IProductState, IStateType, IRootPageStateType } from \"../../store/models/root.interface\";\r\nimport Popup from \"reactjs-popup\";\r\nimport { removeProduct, clearSelectedProduct, setModificationState,\r\n  changeSelectedProduct } from \"../../store/actions/products.action\";\r\nimport { addNotification } from \"../../store/actions/notifications.action\";\r\nimport { ProductModificationStatus, IProduct } from \"../../store/models/product.interface\";\r\n\r\nconst Products: React.FC = () => {\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n  const products: IProductState = useSelector((state: IStateType) => state.products);\r\n  const path: IRootPageStateType = useSelector((state: IStateType) => state.root.page);\r\n  const numberItemsCount: number = products.products.length;\r\n  const totalPrice: number = products.products.reduce((prev, next) => prev + ((next.price * next.amount) || 0), 0);\r\n  const totalAmount: number = products.products.reduce((prev, next) => prev + (next.amount || 0), 0);\r\n  const [popup, setPopup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    dispatch(clearSelectedProduct());\r\n    dispatch(updateCurrentPath(\"products\", \"list\"));\r\n  }, [path.area, dispatch]);\r\n\r\n  function onProductSelect(product: IProduct): void {\r\n    dispatch(changeSelectedProduct(product));\r\n    dispatch(setModificationState(ProductModificationStatus.None));\r\n  }\r\n\r\n  function onProductRemove() {\r\n    if(products.selectedProduct) {\r\n      setPopup(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"h3 mb-2 text-gray-800\">Products</h1>\r\n      <p className=\"mb-4\">Products here</p>\r\n      <div className=\"row\">\r\n        <TopCard title=\"PRODUCT COUNT\" text={`${numberItemsCount}`} icon=\"box\" class=\"primary\" />\r\n        <TopCard title=\"PRODUCT AMOUNT\" text={`${totalAmount}`} icon=\"warehouse\" class=\"danger\" />\r\n        <TopCard title=\"SUMMARY PRICE\" text={`$${totalPrice}`} icon=\"dollar-sign\" class=\"success\" />\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-xl-12 col-lg-12\">\r\n          <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n              <h6 className=\"m-0 font-weight-bold text-green\">Product List</h6>\r\n              <div className=\"header-buttons\">\r\n                <button className=\"btn btn-success btn-green\" onClick={() =>\r\n                  dispatch(setModificationState(ProductModificationStatus.Create))}>\r\n                  <i className=\"fas fa fa-plus\"></i>\r\n                </button>\r\n                <button className=\"btn btn-success btn-blue\" onClick={() =>\r\n                  dispatch(setModificationState(ProductModificationStatus.Edit))}>\r\n                  <i className=\"fas fa fa-pen\"></i>\r\n                </button>\r\n                <button className=\"btn btn-success btn-red\" onClick={() => onProductRemove()}>\r\n                  <i className=\"fas fa fa-times\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <ProductList\r\n                onSelect={onProductSelect}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {((products.modificationState === ProductModificationStatus.Create)\r\n          || (products.modificationState === ProductModificationStatus.Edit && products.selectedProduct)) ?\r\n          <ProductForm /> : null}\r\n      </div>\r\n\r\n\r\n      <Popup\r\n        className=\"popup-modal\"\r\n        open={popup}\r\n        onClose={() => setPopup(false)}\r\n        closeOnDocumentClick\r\n      >\r\n        <div className=\"popup-modal\">\r\n          <div className=\"popup-title\">\r\n            Are you sure?\r\n          </div>\r\n          <div className=\"popup-content\">\r\n            <button type=\"button\"\r\n              className=\"btn btn-danger\"\r\n              onClick={() => {\r\n                if (!products.selectedProduct) {\r\n                  return;\r\n                }\r\n                dispatch(addNotification(\"Product removed\", `Product ${products.selectedProduct.name} was removed`));\r\n                dispatch(removeProduct(products.selectedProduct.id));\r\n                dispatch(clearSelectedProduct());\r\n                setPopup(false);\r\n              }}>Remove\r\n              </button>\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Fragment >\r\n  );\r\n};\r\n\r\nexport default Products;\r\n","import React, { } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IOrder } from \"../../store/models/order.interface\";\r\nimport { IStateType } from \"../../store/models/root.interface\";\r\n\r\nconst OrderList: React.FC = () => {\r\n    const orders: IOrder[] = useSelector((state: IStateType) => state.orders.orders);\r\n\r\n    const orderList: JSX.Element[] = orders.map(order => {\r\n        return (\r\n            <tr className={`table-row`}\r\n                key={`order_${order.id}`}>\r\n                <th scope=\"row\">{order.id}</th>\r\n                <td>{order.name}</td>\r\n                <td>{order.product.name}</td>\r\n                <td>{order.amount}</td>\r\n                <td>{order.totalPrice}</td>\r\n            </tr>);\r\n    })\r\n\r\n    return (\r\n        <div className=\"table-responsive portlet\">\r\n            <table className=\"table\">\r\n                <thead className=\"thead-light\">\r\n                    <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Product</th>\r\n                        <th scope=\"col\">Amount</th>\r\n                        <th scope=\"col\">Total price</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {orderList}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderList;","import { IOrder } from \"../models/order.interface\";\r\n\r\nexport const ADD_ORDER: string = \"ADD_ORDER\";\r\n\r\nexport function addOrder(order: IOrder): IAddOrderActionType {\r\n    return { type: ADD_ORDER, order: order };\r\n}\r\n\r\ninterface IAddOrderActionType { type: string, order: IOrder };\r\n","import React, { useState, FormEvent, Fragment, Dispatch } from \"react\";\r\nimport { IProduct } from \"../../store/models/product.interface\";\r\nimport TextInput from \"../../common/components/TextInput\";\r\nimport NumberInput from \"../../common/components/NumberInput\";\r\nimport { OnChangeModel, IOrderFormState } from \"../../common/types/Form.types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addOrder } from \"../../store/actions/orders.actions\";\r\nimport { addNotification } from \"../../store/actions/notifications.action\";\r\nimport { clearSelectedProduct, changeProductAmount } from \"../../store/actions/products.action\";\r\nimport { IStateType } from \"../../store/models/root.interface\";\r\n\r\nconst OrderForm: React.FC = () => {\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n    const selectedProduct: IProduct | null = useSelector((state: IStateType) => state.products.selectedProduct);\r\n    const initialFormState: IOrderFormState = {\r\n        name: { error: \"\", value: \"\" },\r\n        product: { error: \"\", value: null },\r\n        amount: { error: \"\", value: 0 },\r\n        totalPrice: { error: \"\", value: 0 },\r\n    };\r\n\r\n    const [formState, setFormState] = useState(initialFormState);\r\n\r\n    function hasAmountChanged(model: OnChangeModel): void {\r\n        let totalPrice: number = formState.totalPrice.value;\r\n        if (selectedProduct) {\r\n            totalPrice = selectedProduct.price * (model.value as number);\r\n        }\r\n\r\n        setFormState({\r\n            ...formState,\r\n            amount: { error: model.error, value: model.value as number },\r\n            totalPrice: { error: model.error, value: totalPrice }\r\n        });\r\n\r\n    }\r\n\r\n    function hasFormValueChanged(model: OnChangeModel): void {\r\n        setFormState({ ...formState, [model.field]: { error: model.error, value: model.value } });\r\n    }\r\n\r\n    function resetForm(): void {\r\n        setFormState(initialFormState);\r\n    }\r\n\r\n    function saveOrder(e: FormEvent<HTMLFormElement>): void {\r\n        e.preventDefault();\r\n        if (isFormInvalid()) {\r\n            return;\r\n        }\r\n\r\n        saveForm(formState);\r\n    }\r\n\r\n    function saveForm(formState: IOrderFormState): void {\r\n        if (selectedProduct) {\r\n            if (selectedProduct.amount < formState.amount.value) {\r\n                alert(\"Not enough products in warehouse\");\r\n                return;\r\n            }\r\n\r\n            formState.product.value = selectedProduct;\r\n            dispatch(addOrder({\r\n                id: 0,\r\n                name: formState.name.value,\r\n                amount: formState.amount.value,\r\n                totalPrice: formState.totalPrice.value,\r\n                product: formState.product.value as IProduct\r\n            }));\r\n\r\n            dispatch(addNotification(\"Order added\", `Order ${formState.name.value} added by you`));\r\n            dispatch(clearSelectedProduct());\r\n            dispatch(changeProductAmount(selectedProduct.id, formState.amount.value));\r\n            resetForm();\r\n        }\r\n    }\r\n\r\n    function isFormInvalid(): boolean {\r\n        return (formState.amount.error || formState.totalPrice.error\r\n            || formState.name.error || formState.product.error || !formState.name.value\r\n            || !selectedProduct) as boolean;\r\n    }\r\n\r\n    function getDisabledClass(): string {\r\n        let isError: boolean =  isFormInvalid();\r\n        return isError ? \"disabled\" : \"\";\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"card shadow mb-4\">\r\n                <div className=\"card-header py-3\">\r\n                    <h6 className=\"m-0 font-weight-bold text-green\">Create order</h6>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <form onSubmit={saveOrder}>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-md-12\">\r\n                                <TextInput id=\"input_name\"\r\n                                    value={formState.name.value}\r\n                                    field=\"name\"\r\n                                    onChange={hasFormValueChanged}\r\n                                    required={true}\r\n                                    maxLength={20}\r\n                                    label=\"Name\"\r\n                                    placeholder=\"Name\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                <NumberInput id=\"input_amount\"\r\n                                    value={formState.amount.value}\r\n                                    field=\"amount\"\r\n                                    onChange={hasAmountChanged}\r\n                                    max={1000}\r\n                                    min={0}\r\n                                    label=\"Amount\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-md-6\">\r\n                                <NumberInput id=\"input_totalPrice\"\r\n                                    value={formState.totalPrice.value}\r\n                                    field=\"totalPrice\"\r\n                                    onChange={hasFormValueChanged}\r\n                                    max={1000}\r\n                                    min={0}\r\n                                    label=\"Price\" />\r\n                            </div>\r\n                        </div>\r\n                        <button className=\"btn btn-danger\" onClick={() => resetForm()}>Reset</button>\r\n                        <button type=\"submit\" className={`btn btn-success left-margin ${getDisabledClass()}`}>Create</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default OrderForm;\r\n","import React, { Fragment, Dispatch } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateCurrentPath } from \"../../store/actions/root.actions\";\r\nimport { IOrder } from \"../../store/models/order.interface\";\r\nimport OrderList from \"./OrderList\";\r\nimport TopCard from \"../../common/components/TopCard\";\r\nimport OrderForm from \"./OrderForm\";\r\nimport ProductList from \"../Products/ProductsList\";\r\nimport { IProduct } from \"../../store/models/product.interface\";\r\nimport { changeSelectedProduct, clearSelectedProduct } from \"../../store/actions/products.action\";\r\nimport { IStateType } from \"../../store/models/root.interface\";\r\n\r\nconst Orders: React.FC = () => {\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n    const orders: IOrder[] = useSelector((state: IStateType) => state.orders.orders);\r\n    const totalSales: number = orders.reduce((prev, next) => prev + next.totalPrice, 0);\r\n    const totalAmount: number = orders.reduce((prev, next) => prev + next.amount, 0);\r\n    dispatch(updateCurrentPath(\"orders\", \"list\"));\r\n    dispatch(clearSelectedProduct());\r\n\r\n    function selectProduct(product: IProduct): void {\r\n        dispatch(changeSelectedProduct(product));\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1 className=\"h3 mb-2 text-gray-800\">Order</h1>\r\n            <p className=\"mb-4\">Orders here</p>\r\n\r\n            <div className=\"row\">\r\n                <TopCard title=\"TOTAL SALES\" text={totalSales.toString()} icon=\"donate\" class=\"primary\" />\r\n                <TopCard title=\"TOTAL AMOUNT\" text={totalAmount.toString()} icon=\"calculator\" class=\"danger\" />\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-xl-12 col-lg-12\">\r\n                    <div className=\"card shadow mb-4\">\r\n                        <div className=\"card-header py-3\">\r\n                            <h6 className=\"m-0 font-weight-bold text-green\">Order List</h6>\r\n                            <div className=\"header-buttons\">\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            <OrderList />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    <OrderForm />\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    <div className=\"card card-bottom-list shadow mb-4\">\r\n                        <div className=\"card-header py-3\">\r\n                            <h6 className=\"m-0 font-weight-bold text-green\">Product list</h6>\r\n                        </div>\r\n                        <ProductList\r\n                            onSelect={selectProduct}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Orders;","import React, { Fragment, Dispatch } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateCurrentPath } from \"../../store/actions/root.actions\";\r\nimport TopCard from \"../../common/components/TopCard\";\r\nimport { IProductState, IStateType } from \"../../store/models/root.interface\";\r\nimport ProductList from \"../Products/ProductsList\";\r\nimport { IOrder } from \"../../store/models/order.interface\";\r\nimport OrderList from \"../Orders/OrderList\";\r\n\r\nconst Home: React.FC = () => {\r\n  const products: IProductState = useSelector((state: IStateType) => state.products);\r\n  const numberItemsCount: number = products.products.length;\r\n  const totalPrice: number = products.products.reduce((prev, next) => prev + ((next.price * next.amount) || 0), 0);\r\n  const totalProductAmount: number = products.products.reduce((prev, next) => prev + (next.amount || 0), 0);\r\n\r\n  const orders: IOrder[] = useSelector((state: IStateType) => state.orders.orders);\r\n  const totalSales: number = orders.reduce((prev, next) => prev + next.totalPrice, 0);\r\n  const totalOrderAmount: number = orders.reduce((prev, next) => prev + next.amount, 0);\r\n\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n  dispatch(updateCurrentPath(\"home\", \"\"));\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"h3 mb-2 text-gray-800\">Dashboard</h1>\r\n      <p className=\"mb-4\">Summary and overview of our admin stuff here</p>\r\n\r\n      <div className=\"row\">\r\n        <TopCard title=\"PRODUCT COUNT\" text={`${numberItemsCount}`} icon=\"box\" class=\"primary\" />\r\n        <TopCard title=\"PRODUCT AMOUNT\" text={`${totalProductAmount}`} icon=\"warehouse\" class=\"danger\" />\r\n        <TopCard title=\"SUMMARY PRICE\" text={`$${totalPrice}`} icon=\"dollar-sign\" class=\"success\" />\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <TopCard title=\"SALES\" text={totalSales.toString()} icon=\"donate\" class=\"primary\" />\r\n        <TopCard title=\"ORDER AMOUNT\" text={totalOrderAmount.toString()} icon=\"calculator\" class=\"danger\" />\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n\r\n        <div className=\"col-xl-6 col-lg-6\">\r\n          <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n              <h6 className=\"m-0 font-weight-bold text-green\">Product list</h6>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <ProductList />\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"col-xl-6 col-lg-6\">\r\n          <div className=\"card shadow mb-4\">\r\n            <div className=\"card-header py-3\">\r\n              <h6 className=\"m-0 font-weight-bold text-green\">Order list</h6>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <OrderList />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { Dispatch } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IStateType } from \"../../store/models/root.interface\";\r\nimport { INotification } from \"../../store/models/notification.interface\";\r\nimport { removeNotification } from \"../../store/actions/notifications.action\";\r\n\r\nconst Notifications: React.FC = () => {\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n  const notifications: INotification[] = useSelector((state: IStateType) =>\r\n    state.notifications.notifications);\r\n\r\n  function closeNotification(id: number) {\r\n    dispatch(removeNotification(id));\r\n  }\r\n\r\n  const notificationList = notifications.map(notification => {\r\n    return (\r\n      <div className=\"toast\" key={`notification_${notification.id}`}>\r\n        <div className=\"toast-header\">\r\n          <i className=\"fas fa-fw fa-bell\"></i>\r\n          <strong className=\"mr-auto\">{notification.title}</strong>\r\n          <small>{notification.date.toLocaleTimeString(navigator.language, { hour: '2-digit', minute: '2-digit' })}</small>\r\n          <button type=\"button\"\r\n            className=\"ml-2 mb-1 close\"\r\n            data-dismiss=\"toast\"\r\n            aria-label=\"Close\"\r\n            onClick={() => closeNotification(notification.id)}>\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"toast-body\">\r\n          {notification.text}\r\n        </div>\r\n      </div>\r\n    )\r\n  });\r\n\r\n  return (\r\n    <div className=\"toast-wrapper\">\r\n      {notificationList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n","import React, { Fragment } from \"react\";\r\nimport LeftMenu from \"../LeftMenu/LeftMenu\";\r\nimport TopMenu from \"../TopMenu/TopMenu\";\r\nimport { Switch, Route } from \"react-router\";\r\nimport Users from \"../Users/Users\";\r\nimport Products from \"../Products/Products\";\r\nimport Orders from \"../Orders/Orders\";\r\nimport Home from \"../Home/Home\";\r\nimport Notifications from \"../../common/components/Notification\";\r\n\r\nconst Admin: React.FC = () => {\r\n\r\n  return (\r\n    <Fragment>\r\n      <Notifications />\r\n      <LeftMenu />\r\n      <div id=\"content-wrapper\" className=\"d-flex flex-column\">\r\n        <div id=\"content\">\r\n          <TopMenu />\r\n          <div className=\"container-fluid\">\r\n            <Switch>\r\n              <Route path={`/users`}><Users /></Route>\r\n              <Route path={`/products`}><Products /></Route>\r\n              <Route path={`/orders`}><Orders /></Route>\r\n              <Route path=\"/\"><Home /></Route>\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","import { Route, RouteProps } from \"react-router\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IStateType } from \"../../store/models/root.interface\";\r\nimport { IAccount } from \"../../store/models/account.interface\";\r\nimport Login from \"../../components/Account/Login\";\r\n\r\n\r\nexport function PrivateRoute({ children, ...rest }: RouteProps): JSX.Element {\r\n\r\n    const account: IAccount = useSelector((state: IStateType) => state.account);\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={() =>\r\n                account.email ? (\r\n                    children\r\n                ) : <Login/>\r\n            }\r\n        />\r\n    );\r\n}","import { Route, Redirect, RouteProps } from \"react-router\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IStateType } from \"../../store/models/root.interface\";\r\nimport { IAccount } from \"../../store/models/account.interface\";\r\nimport Login from \"../../components/Account/Login\";\r\n\r\n\r\nexport function AccountRoute({ children, ...rest }: RouteProps): JSX.Element {\r\n\r\n    const account: IAccount = useSelector((state: IStateType) => state.account);\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={() =>\r\n                account.email ? (\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: \"/admin/home\"\r\n                        }}\r\n                    />\r\n                ) : <Login />\r\n            }\r\n        />\r\n    );\r\n}","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./styles/sb-admin-2.min.css\";\r\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\";\r\nimport Login from \"./components/Account/Login\";\r\nimport Admin from \"./components/Admin/Admin\";\r\nimport { PrivateRoute } from \"./common/components/PrivateRoute\";\r\nimport { AccountRoute } from \"./common/components/AccountRoute\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\" id=\"wrapper\">\r\n      <Router>\r\n        <Switch>\r\n          <PrivateRoute path=\"/\">\r\n            <Admin />\r\n          </PrivateRoute>\r\n          <AccountRoute path=\"/login\"><Login /></AccountRoute>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { IProductState, IActionBase } from \"../models/root.interface\";\r\nimport { ADD_PRODUCT, CHANGE_PRODUCT_PENDING_EDIT, EDIT_PRODUCT, REMOVE_PRODUCT,\r\n    CLEAR_PRODUCT_PENDING_EDIT, SET_MODIFICATION_STATE, CHANGE_PRODUCT_AMOUNT} from \"../actions/products.action\";\r\nimport { IProduct, ProductModificationStatus } from \"../models/product.interface\";\r\n\r\n\r\n\r\nconst initialState: IProductState = {\r\n    modificationState: ProductModificationStatus.None,\r\n    selectedProduct: null,\r\n    products: [{\r\n        id: 1, name: \"Chocolate\", description: \"This is Chocolate and it is Sweet\",\r\n        amount: 10, price: 4, hasExpiryDate: true, category: \"Sweet\"\r\n    },\r\n    {\r\n        id: 2, name: \"Apple\", description: \"This is Apple and it is healthy\",\r\n        amount: 5, price: 2, hasExpiryDate: true, category: \"Fruit\"\r\n    },\r\n    {\r\n        id: 3, name: \"Straw\", description: \"This is Straw and you can use it for your drink\",\r\n        amount: 100, price: 1, hasExpiryDate: false, category: \"Kitchen\"\r\n    },\r\n    {\r\n        id: 4, name: \"Spoon\", description: \"This is Spoon and it is useful while eating\",\r\n        amount: 3, price: 2, hasExpiryDate: false, category: \"Kitchen\"\r\n    },\r\n    {\r\n        id: 5, name: \"Sugar\", description: \"This is Sugar and it is to make your life sweet\",\r\n        amount: 15, price: 5, hasExpiryDate: true, category: \"Sweet\"\r\n    }]\r\n};\r\n\r\nfunction productsReducer(state: IProductState = initialState, action: IActionBase): IProductState {\r\n    switch (action.type) {\r\n        case ADD_PRODUCT: {\r\n            let maxId: number = Math.max.apply(Math, state.products.map(function(o) { return o.id; }));\r\n            action.product.id = maxId + 1;\r\n            return { ...state, products: [...state.products, action.product]};\r\n        }\r\n        case EDIT_PRODUCT: {\r\n            const foundIndex: number = state.products.findIndex(pr => pr.id === action.product.id);\r\n            let products: IProduct[] = state.products;\r\n            products[foundIndex] = action.product;\r\n            return { ...state, products: products };\r\n        }\r\n        case REMOVE_PRODUCT: {\r\n            return { ...state, products: state.products.filter(pr => pr.id !== action.id) };\r\n        }\r\n        case CHANGE_PRODUCT_PENDING_EDIT: {\r\n            return { ...state, selectedProduct: action.product };\r\n        }\r\n        case CLEAR_PRODUCT_PENDING_EDIT: {\r\n            return { ...state, selectedProduct: null };\r\n        }\r\n        case SET_MODIFICATION_STATE: {\r\n            return { ...state, modificationState: action.value };\r\n        }\r\n        case CHANGE_PRODUCT_AMOUNT: {\r\n            const foundIndex: number = state.products.findIndex(pr => pr.id === action.id);\r\n            let products: IProduct[] = state.products;\r\n            products[foundIndex].amount = products[foundIndex].amount - action.amount;\r\n            return { ...state, products: products };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default productsReducer;","import { IActionBase, INotificationState } from \"../models/root.interface\";\r\nimport { ADD_NOTIFICATION, REMOVE_NOTIFICATION } from \"../actions/notifications.action\";\r\n\r\nconst initialState: INotificationState = {\r\n    notifications: [{id: 1, date: new Date(), text: \"Hello new user\", title: \"Welcome\"}]\r\n};\r\n\r\nfunction notificationReducer(state: INotificationState = initialState, action: IActionBase): INotificationState {\r\n    switch (action.type) {\r\n        case ADD_NOTIFICATION: {\r\n            let maxId: number= Math.max.apply(Math, state.notifications.map(o =>  o.id));\r\n            if(maxId === -Infinity) { maxId = 0; }\r\n            let newItem = {\r\n                id: maxId + 1,\r\n                date: new Date(),\r\n                title: action.title,\r\n                text: action.text\r\n            };\r\n            return {...state, notifications: [...state.notifications, newItem]};\r\n        }\r\n        case REMOVE_NOTIFICATION: {\r\n            return {...state, notifications: state.notifications\r\n                .filter(Notification => Notification.id !== action.id)};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default notificationReducer;","import { IUserState, IActionBase } from \"../models/root.interface\";\r\nimport { ADD_ADMIN, REMOVE_ADMIN } from \"../actions/users.action\";\r\n\r\nconst initialState: IUserState = {\r\n    users: [\r\n        { id: 1, firstName: \"John\", lastName: \"Smith\", email: \"jsmith@em.pl\", },\r\n        { id: 2, firstName: \"Jannice\", lastName: \"Bing\", email: \"ohmy@fr.pl\" }\r\n    ],\r\n    admins: [\r\n        { id: 3, firstName: \"Jannet\", lastName: \"Crock\", email: \"jcrock@em.pl\" },\r\n    ]\r\n};\r\n\r\nfunction userReducer(state: IUserState = initialState, action: IActionBase): IUserState {\r\n    switch (action.type) {\r\n        case ADD_ADMIN: {\r\n            return { ...state, users: state.users.filter(x=>x.id !== action.user.id), admins: [...state.admins, action.user]};\r\n        }\r\n        case REMOVE_ADMIN: {\r\n            return { ...state, admins: state.admins.filter(x=>x.id !== action.user.id), users: [...state.users, action.user]};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default userReducer;","import { IOrdersState, IActionBase } from \"../models/root.interface\";\r\nimport { ADD_ORDER } from \"../actions/orders.actions\";\r\n\r\n\r\nconst initialState: IOrdersState = {\r\n    orders: [\r\n        {\r\n            id: 1,\r\n            name: \"Apple order\",\r\n            amount: 12,\r\n            totalPrice: 100,\r\n            product: {\r\n                id: 2, name: \"Apple\", description: \"This is Apple and it is healthy\",\r\n                amount: 5, price: 2, hasExpiryDate: true, category: \"Fruit\"\r\n            },\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Straw order\",\r\n            amount: 7,\r\n            totalPrice: 7,\r\n            product: {\r\n                id: 3, name: \"Straw\", description: \"This is Straw and you can use it for your drink\",\r\n                amount: 100, price: 1, hasExpiryDate: false, category: \"Kitchen\"\r\n            },\r\n        }\r\n    ]\r\n};\r\n\r\nfunction orderReducer(state: IOrdersState = initialState, action: IActionBase): IOrdersState {\r\n    switch (action.type) {\r\n        case ADD_ORDER: {\r\n            let maxId: number = Math.max.apply(Math, state.orders.map((o) => { return o.id; }));\r\n            if(maxId === -Infinity) { maxId = 0; }\r\n            return {...state, orders: [...state.orders, {...action.order, id: maxId + 1}]};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default orderReducer;","import { IActionBase } from \"../models/root.interface\";\r\nimport { IAccount } from \"../models/account.interface\";\r\nimport { LOG_IN, LOG_OUT } from \"../actions/account.actions\";\r\n\r\nconst initialState: IAccount = {\r\n    email: \"admin@react-template.pl\"\r\n};\r\n\r\nfunction accountReducer(state: IAccount = initialState, action: IActionBase): IAccount {\r\n    switch (action.type) {\r\n        case LOG_IN: {\r\n            return { ...state, email: (action.email)};\r\n        }\r\n        case LOG_OUT: {\r\n            return { ...state, email: \"\"};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default accountReducer;","import { combineReducers, Reducer } from \"redux\";\r\nimport { UPDATE_CURRENT_PATH } from \"../actions/root.actions\";\r\nimport { IRootStateType, IActionBase, IStateType } from \"../models/root.interface\";\r\nimport productsReducer from \"./products.reducer\";\r\nimport notificationReducer from \"./notification.reducer\";\r\nimport userReducer from \"./users.reducer\";\r\nimport orderReducer from \"./order.reducer\";\r\nimport accountReducer from \"./account.reducer\";\r\n\r\n\r\nconst initialState: IRootStateType = {\r\n    page: {area: \"home\", subArea: \"\"}\r\n};\r\n\r\nfunction rootReducer(state: IRootStateType = initialState, action: IActionBase): IRootStateType {\r\n    switch (action.type) {\r\n        case UPDATE_CURRENT_PATH:\r\n            return { ...state, page: {area: action.area, subArea: action.subArea}};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootReducers: Reducer<IStateType> = combineReducers({root: rootReducer,\r\n    products: productsReducer,\r\n    notifications: notificationReducer,\r\n    users: userReducer,\r\n    orders: orderReducer,\r\n    account: accountReducer\r\n});\r\n\r\n\r\n\r\nexport default rootReducers;","import { createStore, applyMiddleware, Store  } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport rootReducers from \"./reducers/root.reducer\";\r\n\r\n\r\nconst store: Store = createStore(rootReducers, applyMiddleware(\r\n    thunkMiddleware\r\n));\r\n\r\nstore.subscribe(() => {});\r\nexport default store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store/store\";\r\n\r\n\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// f you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}